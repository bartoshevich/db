---
permalink: /service-workers.js
eleventyExcludeFromCollections: true
---

'use strict';

(function () {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Service Worker
  const CONFIG = {
    version: '{{ swVersion }}::',
    features: { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
      hasCacheAPI: typeof caches !== 'undefined',
      hasFetchAPI: typeof fetch !== 'undefined',
      // PromiseAPI –∏ ServiceWorkerAPI (self) –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç SW –≤–æ–æ–±—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    },
    debug: false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    caches: {
      static: 'static-resources',
      pages: 'html-pages',
      images: 'optimized-images',
      media: 'media-files'
    },
    limits: {
      pages: 35,
      images: 100,
      media: 50
    },
    externalDomains: {
      allowedOrigins: ['res.cloudinary.com'], // –î–æ–º–µ–Ω—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      cachingEnabled: true
    },
    // –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    timeouts: {
      network: 8000,     // 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      precache: 15000    // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    },
    corePages: [ // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      '/',
      '/cases/',
      '/blog/',
      '/faq/',
      '/contact/',
      '/uslugi/',
      '/uslugi/marketing-audit/',
      '/uslugi/brand-conception/',
      '/uslugi/razrabotka-reklamnyh-kampanij/',
      '/uslugi/autsorsing-marketinga/',
      '/about/',
      '/offline/', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
    ],
    criticalAssets: [ // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∞—Å—Å–µ—Ç—ã –¥–ª—è –ø—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      '/assets/css/style.css',
      '/assets/scripts/main.bundle.js',
      '/assets/scripts/critical--theme.js',
      '/assets/scripts/registerServiceWorker.js',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-regular.woff2',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-700.woff2',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-italic.woff2',
    ]
  };

  // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
  {% if eleventy.env.isProd and assetManifest %}
  const initialAssetManifest = {
    {% for key, value in assetManifest %}
    "{{ key }}": "{{ value }}",
    {% endfor %}
  };
  let assetManifest = initialAssetManifest;
  {% else %}
  let assetManifest = {};
  {% endif %}

  const manifestUrl = '/asset-manifest.json'; // –ü—É—Ç—å –∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É –∞—Å—Å–µ—Ç–æ–≤

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const imageExtRegex = /\.(jpe?g|png|gif|avif|svg|webp|ico)$/i;
  const hashedAssetRegex = /\.[a-f0-9]{8,}\.(js|css|woff2?|ttf|otf|eot|svg)$/i;
  const mediaFileRegex = /\.(mp3|mp4|webm|ogg|wav|m4a|aac)$/i;

  // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const Utils = {
    log(level, message, ...data) {
      if (!CONFIG.debug && level !== 'error' && level !== 'warn') return;
      const styles = {
        debug: 'color: #7f8c8d', info: 'color: #3498db',
        warn: 'color: #f39c12', error: 'color: #e74c3c; font-weight: bold'
      };
      console[level](`%c[SW ${level.toUpperCase()}]`, styles[level] || '', message, ...data);
    },

    getCacheName(type) {
      if (!CONFIG.caches[type]) {
        Utils.log('error', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–µ—à–∞ –¥–ª—è getCacheName: ${type}`);
        return `${CONFIG.version}unknown-cache`; // Fallback cache name
      }
      return `${CONFIG.version}${CONFIG.caches[type]}`;
    },

    determineCacheType(request) {
      const url = new URL(request.url);
      const pathname = url.pathname.toLowerCase();
      const acceptHeader = request.headers.get('Accept') || '';
      const destination = request.destination;

      if (url.origin !== self.location.origin) {
        if (CONFIG.externalDomains.allowedOrigins.includes(url.hostname) && CONFIG.externalDomains.cachingEnabled) {
          return 'images'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –¥–æ–º–µ–Ω—ã (Cloudinary) —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
        return null; // –í–Ω–µ—à–Ω–∏–π –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
      }

      if (hashedAssetRegex.test(pathname)) return 'static';

      if (destination === 'document' || request.mode === 'navigate' ||
          (acceptHeader.includes('text/html') && !destination && !imageExtRegex.test(pathname) && !mediaFileRegex.test(pathname) && !hashedAssetRegex.test(pathname)) ||
          pathname.endsWith('/')) {
        return 'pages';
      }
      if (destination === 'image' || (acceptHeader.includes('image/') && !destination) || imageExtRegex.test(pathname)) return 'images';
      if (destination === 'audio' || destination === 'video' || (acceptHeader.includes('audio/') && !destination) ||
          (acceptHeader.includes('video/') && !destination) || mediaFileRegex.test(pathname)) {
        return 'media';
      }
      if (destination === 'script' || destination === 'style' || destination === 'font' || pathname.includes('/assets/')) return 'static';

      Utils.log('debug', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–µ—à–∞ –¥–ª—è ${request.url} (dest: ${destination}, accept: ${acceptHeader}). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'static'.`);
      return 'static';
    },

    async fetchWithTimeout(urlOrRequest, options = {}, timeout = CONFIG.timeouts.network) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      const requestUrl = (typeof urlOrRequest === 'string' ? urlOrRequest : urlOrRequest.url);
      try {
        const response = await fetch(urlOrRequest, { ...options, signal: controller.signal });
        clearTimeout(timeoutId);
        return response;
      } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: ${timeout}ms –¥–ª—è ${requestUrl}`);
        }
        throw error;
      }
    },

    createImageFallback() {
      return new Response(
        `<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</title><rect width="400" height="300" fill="#f5f5f5"/><text x="200" y="150" text-anchor="middle" fill="#999" font-family="sans-serif" font-size="16">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</text></svg>`,
        { headers: { 'Content-Type': 'image/svg+xml', 'Cache-Control': 'no-store' } }
      );
    },

    createMediaFallback() {
      return new Response(
        '–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ñ–ª–∞–π–Ω',
        { status: 503, statusText: 'Media resource unavailable offline', headers: { 'Content-Type': 'text/plain; charset=UTF-8', 'Cache-Control': 'no-store' } }
      );
    },

    createOfflinePage() {
      return new Response(
        `<!DOCTYPE html><html lang="ru"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>–û—Ñ–ª–∞–π–Ω</title><style>body{font-family:system-ui,-apple-system,sans-serif;margin:0;padding:20px;text-align:center;background:#f8f9fa;color:#333}.container{max-width:500px;margin:50px auto;padding:40px;background:white;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}h1{color:#e74c3c;margin-bottom:20px}.btn{display:inline-block;padding:12px 24px;background:#3498db;color:white;text-decoration:none;border:none;border-radius:4px;cursor:pointer;margin-top:20px}.btn:hover{background:#2980b9}</style></head><body><div class="container"><h1>üåê –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –æ—Ñ—Ñ–ª–∞–π–Ω</h1><p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</p><p>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –∫–µ—à–∞.</p><button class="btn" onclick="window.location.reload()">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button><a href="/" class="btn" style="margin-left:10px">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a></div></body></html>`,
        { status: 200, headers: { 'Content-Type': 'text/html; charset=utf-8' } }
      );
    },

    async loadAssetManifest() {
      if (assetManifest && Object.keys(assetManifest).length > 0) return assetManifest;
      try {
        const manifestResponse = await this.fetchWithTimeout(manifestUrl, {}, 5000); // 5 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        if (manifestResponse.ok) {
          assetManifest = await manifestResponse.json();
          Utils.log('info', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', Object.keys(assetManifest).length, '—Ñ–∞–π–ª–æ–≤');
          return assetManifest;
        }
        Utils.log('warn', `–ú–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${manifestResponse.status} –ø–æ –∞–¥—Ä–µ—Å—É ${manifestUrl}`);
        return {};
      } catch (error) {
        Utils.log('error', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∞—Å—Å–µ—Ç–æ–≤ (${manifestUrl}):`, error.message);
        return {};
      }
    },

    async getHashedPath(originalPath) { // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      const manifest = await this.loadAssetManifest();
      const cleanPath = originalPath.split('?')[0].split('#')[0];
      const normalizedPath = cleanPath.startsWith('/') ? cleanPath : '/' + cleanPath;
      const hashedPath = manifest[normalizedPath];
      if (!hashedPath) return originalPath;
      try {
        const tempUrl = new URL(originalPath, self.location.origin);
        tempUrl.pathname = hashedPath;
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –±—ã–ª —Ç–∞–∫–∏–º, –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –±—ã–ª –ø–æ–ª–Ω—ã–º.
        return originalPath.startsWith('/') ? (tempUrl.pathname + tempUrl.search + tempUrl.hash) : tempUrl.toString();
      } catch (e) {
        Utils.log('warn', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è ${originalPath}: ${e.message}`);
        return originalPath; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    },

    async getUrlsToPrecache() {
      const manifest = await this.loadAssetManifest();
      const urlsToPrecache = [...CONFIG.corePages];
      for (const originalPath of CONFIG.criticalAssets) {
        const manifestKey = originalPath.startsWith('/') ? originalPath : '/' + originalPath;
        const hashedPath = manifest[manifestKey];
        if (hashedPath) {
          urlsToPrecache.push(hashedPath);
          Utils.log('debug', `–ü—Ä–µ–∫–µ—à: ${originalPath} -> ${hashedPath}`);
        } else {
          Utils.log('warn', `–•–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞—Å—Å–µ—Ç–∞: ${originalPath}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –ø—Ä–µ–∫–µ—à–∞.`);
          urlsToPrecache.push(originalPath);
        }
      }
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /) –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
      return [...new Set(urlsToPrecache)].map(url => {
        try {
          return new URL(url, self.location.origin).pathname;
        } catch (e) {
          Utils.log('warn', `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –ø—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${url}, –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.`);
          return null;
        }
      }).filter(url => url !== null);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  if (!CONFIG.features.hasCacheAPI || !CONFIG.features.hasFetchAPI) {
    Utils.log('error', '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API (Cache API –∏–ª–∏ Fetch API) –¥–ª—è Service Worker. SW –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    return; // –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º
  const Cache = {
    async open(type) {
      return await caches.open(Utils.getCacheName(type));
    },

    async addAll(type, urls) {
      if (!urls || !urls.length) return { successful: 0, failed: 0 };
      try {
        const cache = await this.open(type);
        Utils.log('info', `–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${urls.length} —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫–µ—à '${Utils.getCacheName(type)}'`);
        const batchSize = 5; let results = [];
        for (let i = 0; i < urls.length; i += batchSize) {
          const batch = urls.slice(i, i + batchSize);
          const batchResults = await Promise.allSettled(
            batch.map(async (url) => {
              const requestUrl = new URL(url, self.location.origin).toString();
              const requestToCache = new Request(requestUrl);
              try {
                const response = await Utils.fetchWithTimeout(requestToCache, {}, CONFIG.timeouts.precache);
                if (response.ok) { await cache.put(requestToCache, response); return { status: 'fulfilled', url: requestUrl }; }
                return { status: 'rejected', url: requestUrl, reason: `HTTP ${response.status}` };
              } catch (error) { return { status: 'rejected', url: requestUrl, reason: error.message }; }
            })
          );
          results.push(...batchResults);
        }
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failedPromises = results.filter(r => r.status === 'rejected');
        Utils.log('info', `–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è '${Utils.getCacheName(type)}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ‚úÖ ${successful}, ‚ùå ${failedPromises.length}`);
        if (failedPromises.length > 0 && CONFIG.debug) {
          const failedDetails = failedPromises.map(f => `${f.url} (${f.reason || 'unknown error'})`);
          Utils.log('debug', '–ù–µ—É–¥–∞—á–Ω—ã–µ URL –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', failedDetails.join('; '));
        }
        return { successful, failed: failedPromises.length };
      } catch (error) { Utils.log('error', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è '${Utils.getCacheName(type)}':`, error); return { successful: 0, failed: urls.length }; }
    },

    async put(type, request, response) {
      if (!response || response.status === 206 || request.headers.has('range') || !response.ok) return;
      try {
        const cache = await this.open(type);
        if (response.type === 'opaque' || response.type === 'opaqueredirect') {
           // –î–ª—è Cloudinary (–≤–Ω–µ—à–Ω–∏–µ –¥–æ–º–µ–Ω—ã) opaque-–æ—Ç–≤–µ—Ç—ã –æ—Ç CDN –Ω–æ—Ä–º–∞–ª—å–Ω—ã –∏ –º–æ–≥—É—Ç –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
           if (!CONFIG.externalDomains.allowedOrigins.includes(new URL(request.url).hostname)) {
             Utils.log('debug', `–ü—Ä–æ–ø—É—Å–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è opaque response –¥–ª—è –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞: ${request.url}`);
             return;
           }
        }
        await cache.put(request, response.clone());
      } catch (error) { Utils.log('error', `–û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ${request.url} –≤ '${Utils.getCacheName(type)}':`, error.message); }
    },

    async trim(type, maxItems = null) {
      const limit = maxItems || CONFIG.limits[type]; if (!limit) return;
      const cacheName = Utils.getCacheName(type);
      try {
        const cache = await this.open(type); const keys = await cache.keys();
        if (keys.length <= limit) return;
        const deleteCount = keys.length - limit;
        Utils.log('info', `–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ '${cacheName}': —É–¥–∞–ª—è–µ–º ${deleteCount} –∏–∑ ${keys.length} (–ª–∏–º–∏—Ç: ${limit})`);
        const batchSize = 10;
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (FIFO - –ø–µ—Ä–≤—ã–µ –≤ —Å–ø–∏—Å–∫–µ –∫–ª—é—á–µ–π)
        for (let i = 0; i < deleteCount; i += batchSize) {
          const batchToDelete = keys.slice(i, Math.min(i + batchSize, deleteCount));
          await Promise.all(batchToDelete.map(key => cache.delete(key).catch(e => Utils.log('warn', `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á ${key.url} –∏–∑ –∫–µ—à–∞ ${cacheName}: ${e.message}`))));
        }
        Utils.log('info', `–ö–µ—à '${cacheName}' –æ—á–∏—â–µ–Ω: —É–¥–∞–ª–µ–Ω–æ ${deleteCount} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) { Utils.log('error', `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ '${cacheName}':`, error); }
    },

    async clearOld() {
      try {
        const keys = await caches.keys(); const currentVersionPrefix = CONFIG.version;
        const oldKeys = keys.filter(key => !key.startsWith(currentVersionPrefix));
        if (oldKeys.length === 0) { Utils.log('debug', '–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); return; }
        Utils.log('info', `–£–¥–∞–ª–µ–Ω–∏–µ ${oldKeys.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '${currentVersionPrefix}')`);
        const deleteResults = await Promise.allSettled(oldKeys.map(key => caches.delete(key)));
        const deleted = deleteResults.filter(r => r.status === 'fulfilled' && r.value === true).length;
        Utils.log('info', `–£–¥–∞–ª–µ–Ω–æ ${deleted} –∏–∑ ${oldKeys.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π`);
      } catch (error) { Utils.log('error', '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π:', error); }
    }
  };

  // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const Strategies = {
    async networkFirst(request, cacheType) {
      Utils.log('debug', `Network First: ${request.url}`);
      try {
        const networkResponse = await Utils.fetchWithTimeout(request);
        if (networkResponse.ok) {
          Utils.log('debug', `Network First ‚úÖ (—Å–µ—Ç—å): ${request.url}`);
          Cache.put(cacheType, request, networkResponse.clone()).then(() => Cache.trim(cacheType)).catch(e => Utils.log('warn', `–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (NetworkFirst) ${request.url}: ${e.message}`));
          return networkResponse;
        }
        if (networkResponse.status === 404 && cacheType === 'pages') {
          Utils.log('info', `Network First 404 –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${request.url}. –ü—Ä–æ–±—É–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
          const offlineResponse = await caches.match('/offline/'); return offlineResponse || Utils.createOfflinePage();
        }
        Utils.log('warn', `Network First –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ ${networkResponse.status}: ${request.url}, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à`);
        const cachedResponse = await caches.match(request);
        if (cachedResponse) { Utils.log('info', `Network First ‚úÖ (–∫–µ—à –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏): ${request.url}`); return cachedResponse; }
        if (networkResponse.status >= 500 && cacheType === 'pages') {
           Utils.log('warn', `Network First 5xx (${networkResponse.status}) –æ—à–∏–±–∫–∞, –Ω–µ—Ç –≤ –∫–µ—à–µ, –æ—Ç–¥–∞–µ–º –æ—Ñ–ª–∞–π–Ω: ${request.url}`);
           const offlineResponse = await caches.match('/offline/'); return offlineResponse || Utils.createOfflinePage();
        }
        return networkResponse; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫–µ—à–∞ –∏–ª–∏ —Å–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç–∫–∏
      } catch (error) { // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–∞—É—Ç, –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        Utils.log('warn', `Network First —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${error.message}): ${request.url}, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à.`);
        const cachedResponse = await caches.match(request);
        if (cachedResponse) { Utils.log('info', `Network First ‚úÖ (–∫–µ—à –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏): ${request.url}`); return cachedResponse; }
        if (cacheType === 'pages') {
          Utils.log('info', `Network First, –Ω–µ—Ç —Å–µ—Ç–∏ –∏ –∫–µ—à–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Ç–¥–∞–µ–º –æ—Ñ–ª–∞–π–Ω: ${request.url}`);
          const offlineResponse = await caches.match('/offline/'); return offlineResponse || Utils.createOfflinePage();
        }
        Utils.log('error', `Network First, –Ω–µ—Ç —Å–µ—Ç–∏ –∏ –∫–µ—à–∞ –¥–ª—è ${request.url} (${cacheType}). –û—à–∏–±–∫–∞: ${error.message}`);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –Ω–µ—Ç –∫–µ—à–∞
      }
    },

    async staleWhileRevalidate(request, cacheType) {
      Utils.log('debug', `Stale While Revalidate: ${request.url}`);
      const cache = await Cache.open(cacheType);
      const cachedResponsePromise = cache.match(request);

      const networkUpdatePromise = (async () => {
        try {
          const networkResponse = await Utils.fetchWithTimeout(request);
          if (networkResponse.ok) {
            Utils.log('debug', `SWR –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ –∏–∑ —Å–µ—Ç–∏: ${request.url}`);
            cache.put(request, networkResponse.clone()).then(() => Cache.trim(cacheType)).catch(e => Utils.log('warn', `SWR –æ—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ${request.url}: ${e.message}`));
            return networkResponse.clone(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–æ–Ω –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∫–µ—à–∞ –Ω–µ –±—ã–ª–æ
          }
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º networkResponse –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ .ok, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∂–µ
          Utils.log('warn', `SWR —Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ ${networkResponse.status} –¥–ª—è ${request.url}`);
          return networkResponse;
        } catch (error) {
          Utils.log('warn', `SWR —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${error.message}): ${request.url}.`);
          return null; // –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        }
      })();

      const cachedResponse = await cachedResponsePromise;
      if (cachedResponse) {
        Utils.log('info', `SWR ‚úÖ (–∏–∑ –∫–µ—à–∞): ${request.url}`);
        // –ù–µ –∂–¥–µ–º networkUpdatePromise, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞ –±—ã—Å—Ç—Ä–µ–µ
        networkUpdatePromise.catch(() => { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å, –æ–Ω–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã */ });
        return cachedResponse;
      }

      Utils.log('debug', `SWR –æ–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ (–Ω–µ—Ç –≤ –∫–µ—à–µ): ${request.url}`);
      const networkResponse = await networkUpdatePromise;

      if (networkResponse) { // –ï—Å–ª–∏ —Å–µ—Ç—å —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª–∞
        if (networkResponse.ok) {
            Utils.log('info', `SWR ‚úÖ (–∏–∑ —Å–µ—Ç–∏, –∫–µ—à –±—ã–ª –ø—É—Å—Ç): ${request.url}`);
            return networkResponse;
        } else if (networkResponse.status === 404 && (cacheType === 'static' || cacheType === 'images' || cacheType === 'media')) {
            Utils.log('warn', `SWR: —Ä–µ—Å—É—Ä—Å ${cacheType} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ (404): ${request.url}`);
            if (cacheType === 'images') return Utils.createImageFallback();
            if (cacheType === 'media') return Utils.createMediaFallback();
            // –î–ª—è 'static' –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π 404
            return new Response(`Resource ${request.url} not found`, {
                status: 404, statusText: 'Not Found',
                headers: { 'Content-Type': 'text/plain; charset=UTF-8', 'Cache-Control': 'no-store' }
            });
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ (500 –∏ —Ç.–¥.) –∏–ª–∏ 404 –¥–ª—è 'pages' (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–¥–µ—Å—å)
        // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—â–∏–º fallback'–∞–º –Ω–∏–∂–µ.
        Utils.log('warn', `SWR: —Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É ${networkResponse.status}, –∫–µ—à –ø—É—Å—Ç. ${request.url}`);
      }
      // –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ networkResponse === null (—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞) –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ

      Utils.log('warn', `SWR fallback, –Ω–µ—Ç –∫–µ—à–∞ –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ç–∏: ${request.url}`);
      if (cacheType === 'images') return Utils.createImageFallback();
      if (cacheType === 'media') return Utils.createMediaFallback();
      // –î–ª—è 'static' –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∫–µ—à–∞, –Ω–∏ —Å–µ—Ç–∏
      return new Response(`–†–µ—Å—É—Ä—Å ${request.url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ñ–ª–∞–π–Ω.`, {
        status: 404, statusText: 'Resource unavailable offline',
        headers: { 'Content-Type': 'text/plain; charset=UTF-8', 'Cache-Control': 'no-store' }
      });
    },

    async mediaStrategy(request, cacheType) {
      Utils.log('debug', `Media Strategy: ${request.url}`);
      if (request.headers.has('range')) {
        Utils.log('info', `Media Range request (—Ç–æ–ª—å–∫–æ —Å–µ—Ç—å): ${request.url}`);
        try {
          // Range-–∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –≤ —Å–µ—Ç—å, –Ω–µ –∫–µ—à–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–µ—à–µ
          const networkResponse = await Utils.fetchWithTimeout(request);
          return networkResponse;
        } catch (error) {
          Utils.log('warn', `Media Range –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ (${error.message}): ${request.url}. –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞.`);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ Range-–∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          const fullResponse = await caches.match(request, { ignoreRange: true });
          if (fullResponse) { Utils.log('info', `Media Range fallback –Ω–∞ –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞: ${request.url}`); return fullResponse; }
          return Utils.createMediaFallback(); // –ï—Å–ª–∏ –∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        }
      }
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–¥–∏–∞ (–±–µ–∑ range) –∏—Å–ø–æ–ª—å–∑—É–µ–º SWR
      return this.staleWhileRevalidate(request, cacheType);
    },

    async cloudinaryStrategy(request) {
      Utils.log('debug', `Cloudinary Strategy (SWR): ${request.url}`);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º SWR –¥–ª—è Cloudinary, –∫–µ—à 'images' –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ç–∏–ø–∞
      return this.staleWhileRevalidate(request, 'images');
    }
  };

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ ensureOfflinePage
  let offlinePagePromise = null;

  self.ensureOfflinePage = async function() {
    if (offlinePagePromise) {
        Utils.log('debug', 'ensureOfflinePage: —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–∏—Å.');
        return offlinePagePromise;
    }

    const offlinePageUrl = '/offline/';
    Utils.log('info', `ensureOfflinePage: –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (${offlinePageUrl})`);

    offlinePagePromise = (async () => {
        try {
            const pagesCache = await Cache.open('pages');
            let offlineResponse = await pagesCache.match(offlinePageUrl);

            if (!offlineResponse) {
                Utils.log('info', `ensureOfflinePage: –û—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ. –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ ${offlinePageUrl}`);
                try {
                    const networkResponse = await Utils.fetchWithTimeout(new Request(offlinePageUrl), {}, CONFIG.timeouts.precache); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–∫–µ—à–∞
                    if (networkResponse.ok) {
                        await pagesCache.put(offlinePageUrl, networkResponse);
                        Utils.log('info', '‚úÖ ensureOfflinePage: –û—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞.');
                        return true;
                    } else {
                        throw new Error(`HTTP ${networkResponse.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${offlinePageUrl}`);
                    }
                } catch (e) {
                    Utils.log('warn', `ensureOfflinePage: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–µ—Ä–≤–µ—Ä–∞ (${e.message}). –°–æ–∑–¥–∞–µ–º fallback.`);
                    await pagesCache.put(offlinePageUrl, Utils.createOfflinePage());
                    Utils.log('info', '‚úÖ ensureOfflinePage: Fallback –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞.');
                    return true;
                }
            } else {
                Utils.log('debug', 'ensureOfflinePage: –û—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –≤ –∫–µ—à–µ.');
                return true;
            }
        } catch(error) {
            Utils.log('error', `ensureOfflinePage: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`, error);
            return false; // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –Ω–µ—É–¥–∞—á—É
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SW) –º–æ–≥ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.
            Promise.resolve().then(() => { // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                offlinePagePromise = null;
                Utils.log('debug', 'ensureOfflinePage: –ø—Ä–æ–º–∏—Å —Å–±—Ä–æ—à–µ–Ω.');
            });
        }
    })();
    return offlinePagePromise;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Service Worker
  self.addEventListener('install', event => {
    Utils.log('info', `üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SW –≤–µ—Ä—Å–∏–∏ '${CONFIG.version}'`);
    event.waitUntil(
      (async () => {
        try {
          await Cache.clearOld(); // –û—á–∏—â–∞–µ–º –∫–µ—à–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π SW
          const urlsToPrecache = await Utils.getUrlsToPrecache();
          if (urlsToPrecache.length > 0) {
            const pages = urlsToPrecache.filter(url => CONFIG.corePages.includes(url) || url.endsWith('/'));
            const assets = urlsToPrecache.filter(url => !pages.includes(url));
            if (pages.length > 0) { const pageResults = await Cache.addAll('pages', pages); Utils.log('info', `–ü—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü: ‚úÖ ${pageResults.successful}, ‚ùå ${pageResults.failed}`); }
            if (assets.length > 0) { const assetResults = await Cache.addAll('static', assets); Utils.log('info', `–ü—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–æ–≤: ‚úÖ ${assetResults.successful}, ‚ùå ${assetResults.failed}`); }
          }
          await self.ensureOfflinePage(); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞
          Utils.log('info', '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SW –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å SW –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          // –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –≤—Å–µ–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
          // await self.skipWaiting();
        } catch (error) { Utils.log('error', '‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SW:', error); }
      })()
    );
  });

  self.addEventListener('activate', event => {
    Utils.log('info', `üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è SW –≤–µ—Ä—Å–∏–∏ '${CONFIG.version}'`);
    event.waitUntil(
      (async () => {
        try {
          await Cache.clearOld(); // –ï—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ install —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
          await self.ensureOfflinePage(); // –ò –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É
          await self.clients.claim(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
          Utils.log('info', '‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è SW –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—É—á–µ–Ω');
        } catch (error) { Utils.log('error', '‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SW:', error); }
      })()
    );
  });

  self.addEventListener('message', event => {
    const data = event.data; if (!data || !data.command) return;
    Utils.log('debug', '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data);

    const commands = {
      trimCaches: async () => { Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: trimCaches'); try { await Promise.all(Object.keys(CONFIG.caches).map(type => Cache.trim(type))); Utils.log('info', 'trimCaches –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.'); } catch (error) { Utils.log('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã trimCaches:', error); }},
      setDebug: () => { CONFIG.debug = !!data.value; Utils.log('info', `–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: setDebug = ${CONFIG.debug}`); },
      updateVersion: () => { Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: updateVersion (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π SW)'); self.registration.update().catch(err => Utils.log('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ self.registration.update():', err)); },
      skipWaiting: () => { Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: skipWaiting'); self.skipWaiting().then(() => Utils.log('info', 'skipWaiting –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.')).catch(err => Utils.log('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ skipWaiting:', err));},
      precache: async () => {
        Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: precache', data.urls);
        if (data.urls && Array.isArray(data.urls) && data.urls.length > 0) {
          const urlsToPrecache = data.urls.map(url => { try { return new URL(url, self.location.origin).pathname; } catch(e) { Utils.log('warn', `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è precache: ${url}`); return null; }}).filter(u => u);
          if(urlsToPrecache.length > 0) {
            Utils.log('info', `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${urlsToPrecache.length} URL –≤ 'static'`);
            await Cache.addAll('static', urlsToPrecache).catch(error => Utils.log('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã precache:', error));
          }
        } else { Utils.log('warn', '–ö–æ–º–∞–Ω–¥–∞ precache: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã URL –∏–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç.'); }
      },
      clearCache: async () => {
        const cacheTypeToClear = data.cacheType;
        Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: clearCache', cacheTypeToClear);
        if (cacheTypeToClear && CONFIG.caches[cacheTypeToClear]) {
          const cacheName = Utils.getCacheName(cacheTypeToClear);
          try { await caches.delete(cacheName); Utils.log('info', `–ö–µ—à '${cacheName}' (${cacheTypeToClear}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`); }
          catch (error) { Utils.log('error', `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ '${cacheName}':`, error); }
        } else if (cacheTypeToClear === 'all') {
            Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ clearCache: —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–µ—à–µ–π Service Worker');
            try { const keys = await caches.keys(); await Promise.all(keys.map(key => caches.delete(key))); Utils.log('info', '–í—Å–µ –∫–µ—à–∏ Service Worker —É–¥–∞–ª–µ–Ω—ã.'); }
            catch (error) { Utils.log('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–µ—à–µ–π:', error); }
        } else { Utils.log('warn', '–ö–æ–º–∞–Ω–¥–∞ clearCache: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω cacheType.'); }
      },
      getCacheStats: async () => {
        Utils.log('info', '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: getCacheStats');
        try {
          const stats = {};
          for (const type of Object.keys(CONFIG.caches)) {
            const cache = await Cache.open(type); const keys = await cache.keys();
            stats[type] = { name: Utils.getCacheName(type), count: keys.length, limit: CONFIG.limits[type] || '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ' };
          }
          if (event.ports && event.ports[0]) { event.ports[0].postMessage({ command: 'cacheStatsResponse', stats, swVersion: CONFIG.version.replace('::','') }); }
          Utils.log('info', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É:', stats);
        } catch (error) {
          Utils.log('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞:', error);
          if (event.ports && event.ports[0]) { event.ports[0].postMessage({ command: 'cacheStatsResponse', error: error.message }); }
        }
      }
    };

    const commandHandler = commands[data.command];
    if (commandHandler) { Promise.resolve(commandHandler()).catch(err => Utils.log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${data.command}:`, err) );}
    else { Utils.log('warn', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data.command); }
  });

  self.addEventListener('fetch', event => {
    const request = event.request;
    if (request.method !== 'GET') return; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã

    if (request.headers.get('Service-Worker-Cache-Control') === 'network-only') {
      Utils.log('debug', `–ü—Ä–æ–ø—É—Å–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (Service-Worker-Cache-Control: network-only): ${request.url}`); return;
    }

    const url = new URL(request.url);

    let swScriptPath = '/service-workers.js'; // Fallback, –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å permalink –≤ Eleventy
    try {
        if (self.registration?.active?.scriptURL) {
            swScriptPath = new URL(self.registration.active.scriptURL).pathname;
        } else if (self.location?.pathname) { // self.location –¥–æ—Å—Ç—É–ø–Ω–æ –≤ SW –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É—Ç—å
            swScriptPath = self.location.pathname;
        }
    } catch (e) {
        Utils.log('warn', `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å SW, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback ('${swScriptPath}'). –û—à–∏–±–∫–∞: ${e.message}`);
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–º–æ–º—É SW –∏–ª–∏ –µ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É –∞—Å—Å–µ—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –∏–∑ —Ç–æ–≥–æ –∂–µ origin)
    if (url.origin === self.location.origin && (url.pathname === swScriptPath || url.pathname === manifestUrl)) {
      Utils.log('debug', `–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ SW (${swScriptPath}) –∏–ª–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É (${manifestUrl}): ${request.url}`); return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏–ª–∏ devtools (–Ω–µ http/https –ø—Ä–æ—Ç–æ–∫–æ–ª—ã)
    if (!url.protocol.startsWith('http')) {
      Utils.log('debug', `–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ-HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º: ${request.url}`); return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    if (url.origin !== self.location.origin) {
      if (CONFIG.externalDomains.allowedOrigins.includes(url.hostname) && CONFIG.externalDomains.cachingEnabled) {
        event.respondWith(Strategies.cloudinaryStrategy(request));
      }
      return; // –î–ª—è –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∏—Ö –æ—Ç–∫–ª—é—á–µ–Ω–æ, SW –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è
    }

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (—Ç–æ—Ç –∂–µ origin)
    const cacheType = Utils.determineCacheType(request);
    if (!cacheType) {
      Utils.log('debug', `–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–µ—à–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π): ${request.url}`); return;
    }

    if (cacheType === 'pages') event.respondWith(Strategies.networkFirst(request, cacheType));
    else if (cacheType === 'media') event.respondWith(Strategies.mediaStrategy(request, cacheType));
    else event.respondWith(Strategies.staleWhileRevalidate(request, cacheType)); // 'static', 'images' (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
  });

  self.addEventListener('error', event => {
    let errorDetails = `–°–æ–æ–±—â–µ–Ω–∏–µ: ${event.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ'}`;
    if (event.filename) errorDetails += ` | –§–∞–π–ª: ${event.filename}`;
    if (event.lineno) errorDetails += ` | –°—Ç—Ä–æ–∫–∞: ${event.lineno}`;
    if (event.colno) errorDetails += ` | –ö–æ–ª–æ–Ω–∫–∞: ${event.colno}`;
    if (event.error && event.error.stack) { errorDetails += ` | –°—Ç–µ–∫: ${event.error.stack}`; }
    else if (event.error) { errorDetails += ` | –û—à–∏–±–∫–∞: ${String(event.error)}`; }
    Utils.log('error', '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ Service Worker:', errorDetails);
  });

  self.addEventListener('unhandledrejection', event => {
    let reason = event.reason;
    if (reason && reason.stack) { reason = reason.stack; }
    else if (reason && typeof reason === 'object') { try { reason = JSON.stringify(reason); } catch (e) { reason = String(reason);}}
    else { reason = String(reason); }
    Utils.log('error', '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ –≤ Service Worker:', reason);
  });

  Utils.log('info', `Service Worker (v${CONFIG.version.replace('::','')}) –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.`);

})();