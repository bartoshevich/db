---
permalink: /service-workers.js
eleventyExcludeFromCollections: true
---

'use strict';

(function () {
  // Конфигурация Service Worker
  const CONFIG = {
    // Версия SW. 
    version: '{{ swVersion }}::',
    debug: false, // Включите для подробных логов в консоли SW
    caches: {
      static: 'static-resources', // Хешированные JS, CSS, шрифты, статика
      pages: 'html-pages',      // HTML страницы
      images: 'optimized-images', // Оптимизированные изображения (eleventy-img, Cloudinary)
      media: 'media-files'      // Другие медиа (видео, аудио, если нужно)
    },
    limits: { // Лимиты кеша (сколько последних элементов хранить)
      pages: 35,
      images: 100, 
      media: 50    
    },
    externalDomains: { // Настройки для внешних доменов
      allowedOrigins: ['res.cloudinary.com'], // Cloudinary
      cachingEnabled: true // Кешировать ли ресурсы с разрешенных внешних доменов
    },
    // Базовые пути страниц для предварительного кеширования
    corePages: [
      '/',
      '/cases/',
      '/blog/',
      '/faq/',
      '/contact/',
      '/uslugi/',
      '/uslugi/marketing-audit/',
      '/uslugi/brand-conception/',
      '/uslugi/razrabotka-reklamnyh-kampanij/',
      '/uslugi/autsorsing-marketinga/',
      '/about/',
      '/offline/', 
    ],
    // Пути к критическим ассетам
    criticalAssets: [
      '/assets/css/style.css',
      '/assets/scripts/main.bundle.js',
      '/assets/scripts/critical--theme.js',
      '/assets/scripts/registerServiceWorker.js',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-regular.woff2',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-700.woff2',
      '/assets/fonts/pt-sans-v12-latin_cyrillic/pt-sans-v12-latin_cyrillic-italic.woff2',
    ]
  };

  // Встраиваем манифест прямо в SW при сборке (только в production)
  {% if eleventy.env.isProd and assetManifest %}
  // Предварительно загруженный манифест ассетов из сборки
  const initialAssetManifest = {
    {% for key, value in assetManifest %}
    "{{ key }}": "{{ value }}",
    {% endfor %}
  };
  // Устанавливаем начальное значение
  let assetManifest = initialAssetManifest;
  {% else %}
  // В режиме разработки начинаем с пустого объекта (не null для безопасности)
  let assetManifest = {};
  {% endif %}

  const manifestUrl = '/asset-manifest.json';
  
  // Регулярные выражения для оптимизации производительности
  const imageExtRegex = /\.(jpe?g|png|gif|avif|svg|webp|ico)$/i;
  const hashedAssetRegex = /\.[a-f0-9]{8}\.(js|css|woff2?|ttf|otf|eot|svg)$/i;
  const mediaFileRegex = /\.(mp3|mp4|webm|ogg|wav|m4a|aac)$/i;

  // Служебные функции
  const Utils = {
    log(level, message, ...data) {
      // Логируем только ошибки, предупреждения и debug при включенном режиме отладки
      if (!CONFIG.debug && level !== 'error' && level !== 'warn') return;

      const styles = {
        debug: 'color: #7f8c8d',
        info: 'color: #3498db',
        warn: 'color: #f39c12',
        error: 'color: #e74c3c; font-weight: bold'
      };

      console[level](`%c[SW ${level.toUpperCase()}]`, styles[level], message, ...data);
    },

    getCacheName(type) {
      return `${CONFIG.version}${CONFIG.caches[type]}`;
    },

    determineCacheType(request) {
      const url = new URL(request.url);
      const acceptHeader = request.headers.get('Accept') || '';
      const destination = request.destination;

      // Проверяем внешние домены (Cloudinary)
      if (url.origin !== location.origin) {
        return CONFIG.externalDomains.allowedOrigins.includes(url.hostname) ? 'images' : null;
      }
      
      // Проверяем сначала хешированные файлы во всех директориях
      if (hashedAssetRegex.test(url.pathname)) {
        return 'static';
      }

      // Определяем тип по destination, заголовкам, и URL
      if (request.mode === 'navigate' || acceptHeader.includes('text/html')) {
        return 'pages';
      }
      
      if (destination === 'image' || acceptHeader.includes('image') || imageExtRegex.test(url.pathname)) {
        return 'images';
      }
      
      if (destination === 'audio' || destination === 'video' || 
          mediaFileRegex.test(url.pathname) ||
          (acceptHeader && (acceptHeader.includes('audio') || acceptHeader.includes('video')))) {
        return 'media';
      }
      
      if (destination === 'script' || destination === 'style' || destination === 'font') {
        return 'static';
      }

      return 'static'; // Значение по умолчанию
    },

    // Заглушка для изображений
    createImageFallback() {
      return new Response(
        `<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">Offline</title><g fill="none" fill-rule="evenodd"><path fill="#D8D8D8" d="M0 0h400v300H0z"/><text fill="#9B9B9B" font-family="Helvetica Neue,Arial,Helvetica,sans-serif" font-size="72" font-weight="bold"><tspan x="93" y="172">offline</tspan></text></g></svg>`,
        {
          headers: {
            'Content-Type': 'image/svg+xml',
            'Cache-Control': 'no-store'
          }
        }
      );
    },

    // Заглушка для медиа файлов
    createMediaFallback() {
      return new Response(
        'Медиафайл недоступен в режиме офлайн',
        {
          status: 503,
          statusText: 'Media resource unavailable offline',
          headers: { 
            'Content-Type': 'text/plain; charset=UTF-8',
            'Cache-Control': 'no-store'
          }
        }
      );
    },

    // Создание аварийной офлайн-страницы
    createOfflinePage() {
      return new Response(
        `<!DOCTYPE html><html lang="ru"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
        <title>Офлайн</title></head>
        <body style="font-family:system-ui,-apple-system,sans-serif;margin:0;padding:20px;text-align:center;background:#f5f5f5;">
        <h1 style="margin-top:40px;color:#333;">Вы находитесь оффлайн</h1>
        <p style="color:#666;max-width:600px;margin:20px auto;">Проверьте ваше соединение с интернетом и повторите попытку.</p>
        <button onclick="window.location.reload()" style="padding:10px 20px;background:#3498db;color:white;border:none;border-radius:4px;cursor:pointer;">
        Обновить страницу</button></body></html>`,
        { 
          status: 200, 
          headers: { 'Content-Type': 'text/html; charset=utf-8' }
        }
      );
    },

    // Загрузка манифеста ассетов
    async loadAssetManifest() {
      // Проверка, что манифест уже загружен и содержит данные
      if (assetManifest && Object.keys(assetManifest).length > 0) {
        return assetManifest;
      }

      try {
        const manifestResponse = await fetch(manifestUrl);
        if (manifestResponse.ok) {
          assetManifest = await manifestResponse.json();
          Utils.log('info', 'Манифест ассетов успешно загружен');
          return assetManifest;
        } else {
          Utils.log('error', `Не удалось загрузить манифест ассетов: статус ${manifestResponse.status}`);
          return {}; // Возвращаем пустой объект при ошибке
        }
      } catch (error) {
        Utils.log('error', 'Ошибка при загрузке манифеста ассетов:', error);
        return {}; // Возвращаем пустой объект при ошибке
      }
    },

    // Получение хешированного пути из манифеста
    async getHashedPath(originalPath) {
      const manifest = await this.loadAssetManifest();
      const cleanPath = originalPath.split('?')[0].split('#')[0];
      const normalizedPath = cleanPath.startsWith('/') ? cleanPath : '/' + cleanPath;
      
      const hashedPath = manifest[normalizedPath];
      if (!hashedPath) {
        return originalPath; // Возвращаем оригинальный путь, если хешированный не найден
      }

      // Формируем полный URL с query параметрами и хешем
      const url = new URL(originalPath, 'http://localhost');
      url.pathname = hashedPath;
      return url.pathname + url.search + url.hash;
    },

    // Получение списка URL для предварительного кеширования
    async getUrlsToPrecache() {
      const manifest = await this.loadAssetManifest();
      const urlsToPrecache = [...CONFIG.corePages]; // Начинаем с базовых страниц

      // Добавляем хешированные пути критических ассетов из манифеста
      for (const originalPath of CONFIG.criticalAssets) {
        const hashedPath = manifest[originalPath];
        if (hashedPath) {
          urlsToPrecache.push(hashedPath);
          Utils.log('debug', `Добавлен в прекеш: ${originalPath} -> ${hashedPath}`);
        } else {
          Utils.log('warn', `Не найден хешированный путь для критического ассета: ${originalPath}. Кешируем оригинальный.`);
          urlsToPrecache.push(originalPath); // Кешируем оригинальный путь
        }
      }

      // Уникальные URL, начинающиеся с /
      return [...new Set(urlsToPrecache)].filter(url => url.startsWith('/'));
    }
  };

  // Управление кешем
  const Cache = {
    async open(type) {
      return await caches.open(Utils.getCacheName(type));
    },

    async addAll(type, urls) {
      if (!urls || !urls.length) return;
      
      try {
        const cache = await this.open(type);
        Utils.log('info', `Попытка кеширования ${urls.length} ресурсов типа ${type}`);
        
        // Обрабатываем и отслеживаем результаты всех запросов
        const results = await Promise.allSettled(
          urls.map(async url => {
            try {
              const response = await fetch(url);
              if (response.ok) {
                await cache.put(url, response);
                return { status: 'fulfilled', url };
              } 
              return { status: 'rejected', url, reason: `Ответ не OK (${response.status})` };
            } catch (error) {
              return { status: 'rejected', url, reason: error.message };
            }
          })
        );
        
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected');
        
        Utils.log('info', `Кеширование завершено: успешно ${successful}, неудачно ${failed.length}`);
        if (failed.length > 0 && CONFIG.debug) {
          // Исправлено: правильная структура для rejected-промисов
          Utils.log('debug', 'Неудачные URL:', failed.map(f => 
            f.status === 'rejected' ? 
              `${f.reason?.url || f.value?.url || 'unknown'} (${f.reason || 'неизвестная ошибка'})` : 
              `${f.value?.url || 'unknown'} (неизвестная ошибка)`
          ).join(', '));
        }
      } catch (error) {
        Utils.log('error', `Критическая ошибка при добавлении в кеш ${type}:`, error);
      }
    },

    async put(type, request, response) {
      // Пропускаем, если response не существует или это частичный/range запрос
      if (!response || response.status === 206 || request.headers.has('range')) {
        return;
      }

      try {
        const cache = await this.open(type);
        await cache.put(request, response.clone());
      } catch (error) {
        Utils.log('error', `Ошибка кеширования ресурса ${request.url}:`, error);
      }
    },

    // Оптимизированная очистка кеша по лимиту
    async trim(type, maxItems = null) {
      const limit = maxItems || CONFIG.limits[type];
      if (!limit) return; // Если лимит не установлен, не чистим

      try {
        const cache = await this.open(type);
        const keys = await cache.keys();

        if (keys.length <= limit) return; // Не чистим, если не превышен лимит

        const deleteCount = keys.length - limit;
        Utils.log('info', `Удаление ${deleteCount} ресурсов из кеша ${type}. Текущий размер: ${keys.length}, лимит: ${limit}`);
        
        // Оптимизация: удаляем группами по 10 элементов для лучшей производительности
        const batchSize = 10;
        for (let i = 0; i < deleteCount; i += batchSize) {
          const batch = keys.slice(i, Math.min(i + batchSize, deleteCount));
          await Promise.all(batch.map(key => cache.delete(key)));
        }
        
        Utils.log('info', `Удалено ${deleteCount} элементов из кеша ${type}`);
      } catch (error) {
        Utils.log('error', `Ошибка при очистке кеша ${type}:`, error);
      }
    },

    // Очистка старых версий кеша
    async clearOld() {
      try {
        const keys = await caches.keys();
        const currentVersionPrefix = CONFIG.version;
        const oldKeys = keys.filter(key => !key.startsWith(currentVersionPrefix));

        if (oldKeys.length === 0) {
          Utils.log('info', 'Устаревших кешей не найдено.');
          return;
        }

        Utils.log('info', `Удаление ${oldKeys.length} устаревших кешей`);
        await Promise.all(oldKeys.map(key => caches.delete(key)));
        Utils.log('info', 'Устаревшие кеши успешно удалены.');
      } catch (error) {
        Utils.log('error', 'Ошибка при очистке старых кешей:', error);
      }
    }
  };

  // Стратегии кеширования
  const Strategies = {
    // Стратегия "сначала сеть, затем кеш" для HTML-страниц
    async networkFirst(request, cacheType) {
      Utils.log('debug', `Стратегия Network First для: ${request.url}`);
      try {
        // Пробуем получить из сети
        const response = await fetch(request);

        // Если ответ получен и он OK, кешируем и возвращаем
        if (response.ok) {
          Utils.log('debug', `Network First: Ответ из сети OK для ${request.url}`);
          // Кешируем в фоне, не ждем завершения put/trim для быстрого ответа пользователю
          Cache.put(cacheType, request, response.clone())
            .then(() => Cache.trim(cacheType))
            .catch(e => Utils.log('error', `Network First: Ошибка кеширования:`, e));
          
          return response;
        } 
        
if (response.status === 404) {
      Utils.log('info', `Network First: 404 для ${request.url} - возможно нужен редирект`);
      return response; 
    }

        // Для других ошибок (500, 503 и т.д.) пробуем найти в кеше
        Utils.log('warn', `Network First: Ответ из сети не OK (${response.status}) для ${request.url}. Проверяем кеш.`);
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          Utils.log('info', `Network First: Найдено в кеше: ${request.url}`);
          return cachedResponse;
        }
        
        // Если нет в кеше, возвращаем запасной вариант для HTML или оригинальный ответ
        if (response.status >= 500) {
          Utils.log('info', `Network First: Страница ${request.url} не в сети и не в кеше. Отдаем offline.`);
          const offlineResponse = await caches.match('/offline/');
          if (offlineResponse) {
            return offlineResponse;
          }
          return Utils.createOfflinePage();
        }
        
        return response;
      } catch (error) {
        Utils.log('warn', `Network First: Сеть недоступна или ошибка для ${request.url}. Проверяем кеш.`, error);

        // При ошибке сети ищем в кеше
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          Utils.log('info', `Network First: Найдено в кеше: ${request.url}`);
          return cachedResponse;
        }

        // Если нет в кеше, возвращаем запасной вариант для HTML
        if (cacheType === 'pages') {
          Utils.log('info', `Network First: Страница ${request.url} не в сети и не в кеше. Отдаем offline.`);
          const offlineResponse = await caches.match('/offline/');
          if (offlineResponse) {
            return offlineResponse;
          }
          return Utils.createOfflinePage();
        }

        throw error; // Пробрасываем ошибку для других типов ресурсов
      }
    },

    // Стратегия "сначала кеш, затем обновление в фоне" для статических ресурсов
    async staleWhileRevalidate(request, cacheType) {
      Utils.log('debug', `Стратегия Stale While Revalidate для: ${request.url}`);

      // Параллельно запускаем поиск в кеше и обновление из сети
      const cachedResponsePromise = caches.match(request);
      
      // Функция для получения из сети и обновления кеша
      const updateCache = async () => {
        try {
          const networkResponse = await fetch(request);
          
          if (networkResponse.ok) {
            Utils.log('debug', `SWR: Ответ из сети OK для ${request.url}`);
            Cache.put(cacheType, request, networkResponse.clone())
              .then(() => Cache.trim(cacheType))
              .catch(error => Utils.log('error', `SWR: Ошибка обновления кеша: ${error}`));
          } else {
            Utils.log('warn', `SWR: Ответ из сети не OK (${networkResponse.status}) для ${request.url}. Не кешируем.`);
          }
          
          return networkResponse;
        } catch (error) {
          Utils.log('warn', `SWR: Не удалось получить из сети для ${request.url}.`, error);
          return null;
        }
      };

      // Запускаем обновление кеша параллельно
      const networkPromise = updateCache();
      
      // Проверяем кеш первым
      const cachedResponse = await cachedResponsePromise;
      if (cachedResponse) {
        Utils.log('info', `SWR: Найдено в кеше: ${request.url}`);
        networkPromise.catch(() => {}); // Отлавливаем возможные ошибки обновления
        return cachedResponse;
      }

      // Если нет в кеше, ждем ответа из сети
      Utils.log('debug', `SWR: Не найдено в кеше ${request.url}. Ждем сеть.`);
      const networkResponse = await networkPromise;
      if (networkResponse) {
        return networkResponse;
      }

      // Если нигде не нашли, возвращаем запасной вариант
      Utils.log('warn', `SWR: Нет в кеше и нет в сети для ${request.url}. Отдаем запасной вариант.`);
      if (cacheType === 'images') {
        return Utils.createImageFallback();
      } else if (cacheType === 'media') {
        return Utils.createMediaFallback();
      }
      
      return new Response('Ресурс недоступен офлайн', {
        status: 503,
        statusText: 'Resource unavailable offline',
        headers: { 'Content-Type': 'text/plain; charset=UTF-8' }
      });
    },

    // Специальная стратегия для медиафайлов с обработкой Range-запросов
    async mediaStrategy(request, cacheType) {
      Utils.log('debug', `Стратегия Media Strategy для: ${request.url}`);
      
      // Специальная обработка для Range-запросов
      if (request.headers.has('range')) {
        Utils.log('info', `Media Strategy: Range request для ${request.url}`);
        try {
          // Для Range-запросов идем сразу в сеть
          const response = await fetch(request);
          
          // Проверяем статус ответа (добавлено)
          if (!response.ok && response.status !== 206) { // 206 = Partial Content
            Utils.log('warn', `Media Range: Получен некорректный ответ ${response.status} для ${request.url}`);
            // При ошибке сервера пробуем найти полный файл в кеше
            const fullResponse = await caches.match(request, { ignoreRange: true });
            if (fullResponse) {
              return fullResponse;
            }
            // Если не нашли в кеше, возвращаем оригинальный ответ или заглушку
            return response.status === 404 ? 
              Utils.createMediaFallback() : response;
          }
          
          return response;
        } catch (error) {
          Utils.log('error', `Media Range: Сеть недоступна для ${request.url}`, error);
          return Utils.createMediaFallback();
        }
      }
      
      // Для обычных запросов используем SWR
      return this.staleWhileRevalidate(request, cacheType);
    },

    // Специальная стратегия для Cloudinary (модифицированная SWR)
    async cloudinaryStrategy(request) {
      Utils.log('debug', `Стратегия Cloudinary для: ${request.url}`);
      return this.staleWhileRevalidate(request, 'images');
    }
  };

  // Обработчики Service Worker

  // Установка: кешируем основные ресурсы
  self.addEventListener('install', event => {
    Utils.log('info', 'Установка Service Worker ' + CONFIG.version);

    // event.waitUntil гарантирует, что SW не будет установлен до завершения промиса
    event.waitUntil(
      (async () => {
        try {
          // Очищаем старые кеши на этапе установки
          await Cache.clearOld();

          // Загружаем манифест и получаем URL для прекеширования
          const urlsToPrecache = await Utils.getUrlsToPrecache();
          if (urlsToPrecache.length > 0) {
            await Cache.addAll('static', urlsToPrecache);
          } else {
            Utils.log('warn', 'Список URL для прекеширования пуст!');
          }

          // Убеждаемся, что offline страница закеширована
          const offlinePageUrl = '/offline/';
          let offlineResponse = await caches.match(offlinePageUrl);
          if (!offlineResponse) {
            Utils.log('info', `Кеширование офлайн страницы: ${offlinePageUrl}`);
            try {
              await Cache.addAll('pages', [offlinePageUrl]);
              
              // Проверяем, успешно ли закешировалась оффлайн-страница (добавлено)
              offlineResponse = await caches.match(offlinePageUrl);
              if (offlineResponse) {
                Utils.log('info', `Офлайн страница успешно закеширована.`);
              } else {
                Utils.log('warn', `Офлайн страница не обнаружена в кеше после попытки кеширования.`);
                // Создаем аварийный HTML для офлайн страницы прямо в кеше
                const pagesCache = await Cache.open('pages');
                await pagesCache.put(offlinePageUrl, Utils.createOfflinePage());
                Utils.log('info', `Создана аварийная офлайн-страница в кеше.`);
              }
            } catch (e) {
              Utils.log('error', `Не удалось закешировать офлайн страницу: ${offlinePageUrl}`, e);
              // Создаем аварийный HTML для офлайн страницы прямо в кеше
              try {
                const pagesCache = await Cache.open('pages');
                await pagesCache.put(offlinePageUrl, Utils.createOfflinePage());
                Utils.log('info', `Создана аварийная офлайн-страница в кеше.`);
              } catch (innerError) {
                Utils.log('error', `Не удалось создать аварийную офлайн-страницу:`, innerError);
              }
            }
          } else {
            Utils.log('info', `Офлайн страница уже в кеше.`);
          }

          Utils.log('info', 'Этап установки SW завершен.');
        } catch (error) {
          Utils.log('error', 'Ошибка при установке Service Worker:', error);
        }
      })()
    );
  });

  // Активация: очищаем старые кеши и заявляем контроль над клиентами
  self.addEventListener('activate', event => {
    Utils.log('info', 'Активация Service Worker ' + CONFIG.version);
    
    event.waitUntil(
      (async () => {
        try {
          // В активации уже не очищаем кеши, т.к. это сделано при установке
          Utils.log('info', 'Этап активации SW завершен.');
        } catch (error) {
          Utils.log('error', 'Ошибка при активации Service Worker:', error);
        }
      })()
    );
  });

  // Обработка сообщений из клиентского скрипта
  self.addEventListener('message', event => {
    const data = event.data;
    if (!data || !data.command) return;
    
    Utils.log('debug', 'Получено сообщение:', data);
    
    switch (data.command) {
      case 'trimCaches':
        Utils.log('info', 'Получена команда: trimCaches');
        Promise.all(Object.keys(CONFIG.caches).map(type => Cache.trim(type)))
          .catch(error => Utils.log('error', 'Ошибка при выполнении trimCaches:', error));
        break;

      case 'setDebug':
        CONFIG.debug = !!data.value;
        Utils.log('info', `Получена команда: setDebug. Режим отладки ${CONFIG.debug ? 'включен' : 'выключен'}`);
        break;

      case 'updateVersion':
        Utils.log('info', 'Получена команда: updateVersion');
        self.registration.update();
        break;

      case 'skipWaiting':
        Utils.log('info', 'Получена команда: skipWaiting');
        self.skipWaiting();
        break;

      case 'precache':
        Utils.log('info', 'Получена команда: precache', data.urls);
        if (data.urls && Array.isArray(data.urls)) {
          const urlsToPrecache = data.urls.map(url => new URL(url, self.location.origin).pathname);
          Utils.log('info', `Добавление ${urlsToPrecache.length} URL в кеш static по команде precache`);
          Cache.addAll('static', urlsToPrecache)
            .catch(error => Utils.log('error', 'Ошибка при выполнении precache:', error));
        }
        break;

        case 'clearCache':
        Utils.log('info', 'Получена команда: clearCache', data.cacheType);
        if (data.cacheType && CONFIG.caches[data.cacheType]) {
          caches.delete(Utils.getCacheName(data.cacheType))
            .then(() => Utils.log('info', `Кеш ${data.cacheType} очищен`))
            .catch(error => Utils.log('error', `Ошибка при очистке кеша ${data.cacheType}:`, error));
        } else {
          Utils.log('warn', 'Получена команда clearCache с неверным типом кеша');
        }
        break;
 
      default:
        Utils.log('warn', 'Получена неизвестная команда:', data.command);
    }
  });
 
  // Обработка fetch-запросов с учетом хешированных имен файлов
  self.addEventListener('fetch', event => {
    const request = event.request;
 
    // Быстрые проверки для пропуска запросов
    if (request.method !== 'GET' || 
        request.headers.get('Service-Worker-Cache-Control') === 'network-only') {
      return;
    }
 
    const url = new URL(request.url);
 
    // Проверка внешних доменов и девтулз/расширений
    if (url.origin !== self.location.origin) {
      // Обрабатываем только разрешенные внешние домены
      if (CONFIG.externalDomains.allowedOrigins.includes(url.hostname) && 
          CONFIG.externalDomains.cachingEnabled) {
        event.respondWith(Strategies.cloudinaryStrategy(request));
      }
      return;
    }
 
    // Пропускаем расширения и девтулз
    if (url.protocol === 'chrome-extension:' || url.protocol === 'devtools:') {
      return;
    }
 
    // Определяем тип кеша для запроса
    const cacheType = Utils.determineCacheType(request);
    if (!cacheType) {
      return; // Не обрабатываем запросы без определенного типа кеша
    }
 
    // Выбор стратегии в зависимости от типа ресурса
    if (cacheType === 'pages') {
      event.respondWith(Strategies.networkFirst(request, cacheType));
    } else if (cacheType === 'media') {
      event.respondWith(Strategies.mediaStrategy(request, cacheType));
    } else {
      event.respondWith(Strategies.staleWhileRevalidate(request, cacheType));
    }
  });
 })();