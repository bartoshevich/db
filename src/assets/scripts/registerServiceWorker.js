
if ('serviceWorker' in navigator) {
  window.addEventListener('load', async () => {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });

      console.log('‚úÖ SW –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);

      // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞
            console.log('üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞');
            
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (confirm('–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞. –û–±–Ω–æ–≤–∏—Ç—å?')) {
              newWorker.postMessage({ command: 'updateVersion' });
              window.location.reload();
            }
          }
        });
      });

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
      setInterval(() => {
        registration.update();
      }, 10 * 60 * 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SW:', error);
    }
  });

  // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç SW
  navigator.serviceWorker.addEventListener('message', (event) => {
    if (event.data.command === 'reload') {
      window.location.reload();
    }
  });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SW –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.swUtils = {
  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à–∏
  async clearCaches() {
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({ 
        command: 'trimCaches' 
      });
    }
  },
  
  // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
  setDebug(enabled = true) {
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({ 
        command: 'setDebug', 
        value: enabled 
      });
    }
  },
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  async forceUpdate() {
    const registration = await navigator.serviceWorker.getRegistration();
    if (registration) {
      registration.update();
    }
  }
};