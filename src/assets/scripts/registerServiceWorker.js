// src/assets/scripts/registerServiceWorker.js - –∑–∞–º–µ–Ω—è–µ—Ç –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
import { Workbox } from 'workbox-window';

class ServiceWorkerManager {
  constructor() {
    this.wb = null;
    this.registration = null;
    this.isUpdateAvailable = false;
    this.isOffline = !navigator.onLine;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.init();
    this.setupNetworkListeners();
  }

  async init() {
    if (!('serviceWorker' in navigator)) {
      console.warn('‚ùå Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: Workbox + –≤–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π SW
      this.wb = new Workbox('/sw-generated.js', {
        scope: '/',
        updateViaCache: 'none' // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      });
      
      this.setupWorkboxListeners();
      this.registration = await this.wb.register();
      
      console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.startUpdateCheck();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
    }
  }

  setupWorkboxListeners() {
    // SW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∂–¥–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    this.wb.addEventListener('waiting', (event) => {
      console.log('‚è≥ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è SW –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
      this.isUpdateAvailable = true;
      this.showUpdateNotification();
    });

    // SW –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
    this.wb.addEventListener('controlling', (event) => {
      console.log('üéØ –ù–æ–≤—ã–π SW –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      this.showSuccessMessage();
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setTimeout(() => window.location.reload(), 1000);
    });

    // –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SW
    this.wb.addEventListener('installed', (event) => {
      if (!event.isUpdate) {
        console.log('üéâ Service Worker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ');
        this.showInstallMessage();
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    this.wb.addEventListener('message', (event) => {
      if (event.data.type === 'CACHE_UPDATED') {
        const { updatedURL } = event.data.payload;
        console.log(`üì¶ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è: ${updatedURL}`);
      }
      
      if (event.data.type === 'SW_ACTIVATED') {
        console.log('‚úÖ SW —Å–æ–æ–±—â–∞–µ—Ç –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', event.data.payload);
      }
    });
  }

  setupNetworkListeners() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    window.addEventListener('online', () => {
      this.isOffline = false;
      this.hideOfflineIndicator();
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
      this.checkForUpdates();
    });

    window.addEventListener('offline', () => {
      this.isOffline = true;
      this.showOfflineIndicator();
      console.log('üì¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (this.isOffline) {
      this.showOfflineIndicator();
    }
  }

  showUpdateNotification() {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.removeNotification();
    
    const notification = document.createElement('div');
    notification.className = 'sw-notification sw-update';
    notification.innerHTML = `
      <div class="sw-notification__content">
        <div class="sw-notification__icon">üîÑ</div>
        <div class="sw-notification__text">
          <strong>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</strong>
          <p>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ</p>
        </div>
        <div class="sw-notification__actions">
          <button class="sw-btn sw-btn--primary" data-action="update">
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
          <button class="sw-btn sw-btn--secondary" data-action="dismiss">
            –ü–æ–∑–∂–µ
          </button>
        </div>
      </div>
    `;

    document.body.appendChild(notification);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    notification.addEventListener('click', (e) => {
      const action = e.target.dataset.action;
      
      if (action === 'update') {
        this.activateUpdate();
        this.removeNotification();
      } else if (action === 'dismiss') {
        this.removeNotification();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setTimeout(() => {
          if (this.isUpdateAvailable) {
            this.showUpdateNotification();
          }
        }, 10 * 60 * 1000);
      }
    });

    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        this.removeNotification();
      }
    }, 30000);
  }

  showInstallMessage() {
    const toast = this.createToast('üéâ –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –æ—Ñ–ª–∞–π–Ω', 'success');
    this.showToast(toast);
  }

  showSuccessMessage() {
    const toast = this.createToast('‚úÖ –°–∞–π—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏', 'success');
    this.showToast(toast);
  }

  showOfflineIndicator() {
    let indicator = document.querySelector('.offline-indicator');
    if (!indicator) {
      indicator = document.createElement('div');
      indicator.className = 'offline-indicator';
      indicator.innerHTML = `
        <span class="offline-indicator__icon">üì¥</span>
        <span class="offline-indicator__text">–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>
      `;
      document.body.appendChild(indicator);
    }
    indicator.classList.add('offline-indicator--visible');
  }

  hideOfflineIndicator() {
    const indicator = document.querySelector('.offline-indicator');
    if (indicator) {
      indicator.classList.remove('offline-indicator--visible');
    }
  }

  createToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `sw-toast sw-toast--${type}`;
    toast.textContent = message;
    return toast;
  }

  showToast(toast) {
    document.body.appendChild(toast);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
      toast.classList.add('sw-toast--visible');
    });

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      toast.classList.remove('sw-toast--visible');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 300);
    }, 3000);
  }

  removeNotification() {
    const notification = document.querySelector('.sw-notification');
    if (notification) {
      notification.remove();
    }
  }

  async activateUpdate() {
    if (!this.wb || !this.isUpdateAvailable) return;

    console.log('üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SW...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loading = this.createToast('‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...', 'info');
    this.showToast(loading);

    try {
      // –°–æ–æ–±—â–∞–µ–º –Ω–æ–≤–æ–º—É SW –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      await this.wb.messageSW({ type: 'SKIP_WAITING' });
      this.isUpdateAvailable = false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      const errorToast = this.createToast('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
      this.showToast(errorToast);
    }
  }

  async checkForUpdates() {
    if (this.registration) {
      try {
        await this.registration.update();
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      }
    }
  }

  startUpdateCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      if (!this.isOffline) {
        this.checkForUpdates();
      }
    }, 5 * 60 * 1000);
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async forceUpdate() {
    await this.checkForUpdates();
  }

  getStatus() {
    return {
      isRegistered: !!this.registration,
      isUpdateAvailable: this.isUpdateAvailable,
      isOffline: this.isOffline
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç
const swManager = new ServiceWorkerManager();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  window.swManager = swManager;
}

export default swManager;