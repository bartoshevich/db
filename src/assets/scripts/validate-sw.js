// scripts/validate-sw.js
import fs from 'fs';
import path from 'path';

const swPath = path.resolve('_site/sw.js');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker...');

if (!fs.existsSync(swPath)) {
  console.error('‚ùå Service Worker –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  process.exit(1);
}

const swContent = fs.readFileSync(swPath, 'utf8');

const checks = [
  {
    name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
    test: () => swContent.length > 1000,
    error: 'Service Worker —Å–ª–∏—à–∫–æ–º –º–∞–ª!'
  },
  {
    name: 'Workbox –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    test: () => swContent.includes('workbox'),
    error: 'Service Worker –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Workbox!'
  },
  {
    name: 'SKIP_WAITING handler',
    test: () => swContent.includes('SKIP_WAITING'),
    error: 'Service Worker –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç SKIP_WAITING handler!'
  }
];

let allPassed = true;

checks.forEach(check => {
  if (check.test()) {
    console.log(`‚úÖ ${check.name}`);
  } else {
    console.error(`‚ùå ${check.name}: ${check.error}`);
    allPassed = false;
  }
});

try {
  new Function(swContent);
  console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
} catch (syntaxError) {
  console.error('‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', syntaxError.message);
  allPassed = false;
}

if (allPassed) {
  console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
} else {
  console.log('\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏!');
  process.exit(1);
}