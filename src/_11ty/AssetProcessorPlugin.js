// src/_11ty/AssetProcessorPlugin.js

import fs from 'fs';
import fsPromises from 'fs/promises';
import path from 'path';
import crypto from 'crypto';
import * as glob from 'glob';
import * as sass from 'sass';
import postcss from 'postcss';
import esbuild from 'esbuild';
import * as Terser from 'terser';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–±–æ—Ä–∫–∞
const isProdBuild = process.env.ELEVENTY_ENV === "production";

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è AssetProcessor
 */
class Logger {
  constructor(isProd = false, componentName = 'AssetProcessor') {
    this.isProd = isProd;
    this.componentName = componentName;
    this.logCache = new Set();
  }

  formatMessage(msg, prefix = null) {
    return prefix ? `[${this.componentName}:${prefix}] ${msg}` : `[${this.componentName}] ${msg}`;
  }

  log(level, msg, prefix, ...args) {
    if (this.isProd && level === 'debug') return;
    const formatted = this.formatMessage(msg, prefix);
    if (level === 'warn' || level === 'error') {
      const key = `${formatted}${args.join('')}`;
      if (this.logCache.has(key)) return;
      this.logCache.add(key);
    }

    const icon = level === 'error' ? '‚ùå ' : 
                level === 'warn' ? '‚ö†Ô∏è ' : 
                level === 'debug' ? 'üîç ' : '';
    
    console[level](icon + formatted, ...args);
  }

  debug(msg, prefix, ...args) { this.log('debug', msg, prefix, ...args); }
  info(msg, prefix, ...args) { this.log('log', msg, prefix, ...args); }
  warn(msg, prefix, ...args) { this.log('warn', msg, prefix, ...args); }
  error(msg, prefix, ...args) { this.log('error', msg, prefix, ...args); }
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
 */
class AssetCache {
  constructor(logger) {
    this.logger = logger;
    this.cachePath = path.join(process.cwd(), '.cache');
    this.cacheFile = path.join(this.cachePath, 'asset-cache.json');
    this.manifest = {};
    this.hashCache = new Map();
    this.statsCache = new Map();
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.cachePath)) {
      try {
        fs.mkdirSync(this.cachePath, { recursive: true });
      } catch (e) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞: ${e.message}`);
      }
    }
    
    this.loadCache();
  }
  
  loadCache() {
    try {
      if (fs.existsSync(this.cacheFile)) {
        const data = JSON.parse(fs.readFileSync(this.cacheFile, 'utf8'));
        this.manifest = data.manifest || {};
        
        if (data.hashCache) this.hashCache = new Map(data.hashCache);
        if (data.statsCache) this.statsCache = new Map(data.statsCache);
        
        this.logger.debug(`–ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${Object.keys(this.manifest).length} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (e) {
      this.logger.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: ${e.message}`);
    }
  }
  
  saveCache() {
    try {
      const cacheData = {
        manifest: this.manifest,
        hashCache: Array.from(this.hashCache.entries()),
        statsCache: Array.from(this.statsCache.entries())
      };
      
      if (!fs.existsSync(this.cachePath)) {
        fs.mkdirSync(this.cachePath, { recursive: true });
      }
      
      fs.writeFileSync(
        this.cacheFile,
        JSON.stringify(cacheData, null, isProdBuild ? 0 : 2)
      );
      
      this.logger.debug(`–ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${Object.keys(this.manifest).length} –∑–∞–ø–∏—Å–µ–π`);
    } catch (e) {
      this.logger.warn(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: ${e.message}`);
    }
  }
  
  isFileChanged(filePath) {
    try {
      const stats = fs.statSync(filePath);
      const mtime = stats.mtime.getTime();
      const cachedMtime = this.statsCache.get(filePath);
      
      if (cachedMtime && cachedMtime === mtime) {
        return false;
      }
      
      this.statsCache.set(filePath, mtime);
      return true;
    } catch (e) {
      return true;
    }
  }
  
  getFileHash(content, length = 8) {
    if (!isProdBuild) return '';
    
    try {
      const contentKey = typeof content === 'string' 
        ? content.substring(0, 100) 
        : (Buffer.isBuffer(content) ? content.slice(0, 100).toString('hex') : '');
      
      const cacheKey = `hash_${contentKey}`;
      
      if (this.hashCache.has(cacheKey)) {
        return this.hashCache.get(cacheKey);
      }
      
      const hashSum = crypto.createHash('md5');
      if (Buffer.isBuffer(content)) {
        hashSum.update(content);
      } else if (typeof content === 'string') {
        hashSum.update(Buffer.from(content, 'utf8'));
      } else {
        return '';
      }
      
      const hash = hashSum.digest('hex').slice(0, length);
      this.hashCache.set(cacheKey, hash);
      return hash;
    } catch (e) {
      this.logger.warn(`–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}`);
      return '';
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å—Å–µ—Ç–æ–≤
 */
class AssetProcessor {
  constructor(config = {}) {
    const { 
      compilers, 
      assetEntryPoints, 
      inputDir, 
      outputDir, 
      concurrency = 4, 
      errorStrategy = { failOnError: isProdBuild }
    } = config;

    if (!compilers || !assetEntryPoints || !inputDir || !outputDir) {
      throw new Error("Missing required configuration options.");
    }

    this.logger = new Logger(isProdBuild);
    this.cache = new AssetCache(this.logger);
    this.manifest = {}; // –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤
    
    this.config = { 
      assetEntryPoints, 
      inputDir, 
      outputDir, 
      concurrency,
      errorStrategy
    };
    
    this.compilers = compilers;

    this.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º –≤ production –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –≤ dev
   */
  getHashedFilename(originalPath, content) {
    if (!isProdBuild) return originalPath;
    
    const parsedPath = path.parse(originalPath);
    const hash = this.cache.getFileHash(content);
    
    if (!hash) return originalPath;
    
    return `${parsedPath.name}.${hash}${parsedPath.ext}`;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤
   */
  addToManifest(originalPath, hashedPath) {
    if (!isProdBuild) return;
    
    let normalizedOriginal = originalPath.startsWith('/') ? originalPath : '/' + originalPath;
    let normalizedHashed = hashedPath.startsWith('/') ? hashedPath : '/' + hashedPath;
    
    if (this.manifest[normalizedOriginal] && this.manifest[normalizedOriginal] !== normalizedHashed) {
      this.logger.warn(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –¥–ª—è "${normalizedOriginal}"`);
    }
    
    this.manifest[normalizedOriginal] = normalizedHashed;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞—Å—Å–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async processAllAssets() {
    this.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å—Å–µ—Ç–æ–≤...");
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const globResults = Array.isArray(this.config.assetEntryPoints)
        ? this.config.assetEntryPoints.flatMap(pattern => {
            try {
              return glob.sync(path.join(process.cwd(), pattern), { nodir: true, absolute: true });
            } catch(e) {
              this.logger.error(`–û—à–∏–±–∫–∞ –≤ glob.sync –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "${pattern}": ${e.message}`);
              return [];
            }
          })
        : glob.sync(path.join(process.cwd(), this.config.assetEntryPoints), { nodir: true, absolute: true });
      
      const uniqueFiles = [...new Set(globResults)];
      
      if (uniqueFiles.length === 0) {
        this.logger.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
        return [];
      }
      
      this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${uniqueFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const concurrency = this.config.concurrency;
      const errors = [];
      const results = [];
      
      for (let i = 0; i < uniqueFiles.length; i += concurrency) {
        const batch = uniqueFiles.slice(i, i + concurrency);
        const batchPromises = batch.map(async filePath => {
          try {
            return await this.processFile(filePath);
          } catch (error) {
            errors.push({ filePath, error });
            return null;
          }
        });
        
        const batchResults = await Promise.all(batchPromises);
        results.push(...batchResults.filter(r => r !== null));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏ —Ñ–∞–π–ª–æ–≤
        if (isProdBuild) {
          this.cache.saveCache();
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (errors.length > 0) {
        this.logger.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤`);
        
        errors.forEach(({ filePath, error }) => {
          this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${path.basename(filePath)}: ${error.message}`);
        });
        
        // –í production —Ä–µ–∂–∏–º–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if (isProdBuild && this.config.errorStrategy.failOnError) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${errors.length} —Ñ–∞–π–ª–æ–≤`);
        }
      }
      
      this.logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ ${results.length} —Ñ–∞–π–ª–æ–≤`);
      return results;
      
    } catch (error) {
      this.logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      if (isProdBuild) throw error;
      return [];
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  async processFile(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const relPath = path.relative(this.config.inputDir, filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–∏
    if (isProdBuild && !this.cache.isFileChanged(filePath)) {
      const cachedResult = this.cache.manifest[relPath];
      if (cachedResult) {
        this.logger.debug(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${path.basename(filePath)}`);
        
        if (cachedResult.originalWebPath && cachedResult.hashedWebPath) {
          this.addToManifest(cachedResult.originalWebPath, cachedResult.hashedWebPath);
        }
        
        return cachedResult;
      }
    }
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (ext === '.scss' || ext === '.sass') {
        return await this.processScss(filePath);
      } else if (ext === '.js') {
        return await this.processJs(filePath);
      } else {
        return await this.processStatic(filePath);
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${path.basename(filePath)}: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SCSS —Ñ–∞–π–ª—ã
   */
  async processScss(filePath) {
    const filePrefix = path.basename(filePath);
    const relativePathFromInput = path.relative(this.config.inputDir, filePath).replace(/\\/g, '/');
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å _)
    if (path.basename(filePath).startsWith('_')) {
      this.logger.debug(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ñ–∞–π–ª ${filePrefix}`);
      return null;
    }
    
    try {
      // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const fileContent = await fsPromises.readFile(filePath, 'utf8');
      
      // –ö–æ–º–ø–∏–ª—è—Ü–∏—è SCSS
      const sassResult = this.compilers.sass.compileString(fileContent, {
        loadPaths: [path.dirname(filePath), path.join(process.cwd(), this.config.inputDir)],
        style: isProdBuild ? "compressed" : "expanded",
        sourceMap: !isProdBuild
      });
      
      let resultCss = sassResult.css;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ PostCSS –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
      if (this.compilers.postcss && this.compilers.postcssConfig && this.compilers.postcssConfig.plugins) {
        const fromPath = filePath.replace(/\.scss$/, '.css');
        const toPath = path.join(process.cwd(), this.config.outputDir, 
          path.relative(this.config.inputDir, fromPath));
        
        const postcssResult = await this.compilers.postcss(this.compilers.postcssConfig.plugins)
          .process(resultCss, {
            from: fromPath,
            to: toPath,
            map: { inline: !isProdBuild }
          });
        
        resultCss = postcssResult.css;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
      const isMainStylesheet = relativePathFromInput === '_input_sass/style.scss';
      
      let outputSubdir, originalWebPath;
      
      if (isMainStylesheet) {
        // –≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π, –ø–æ–º–µ—â–∞–µ–º –µ–≥–æ –≤ assets/css/style.css
        outputSubdir = 'assets/css';
        originalWebPath = '/assets/css/style.css';
      } else {
        // –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        outputSubdir = path.dirname(relativePathFromInput);
        originalWebPath = '/' + relativePathFromInput.replace(/\.scss$/, '.css');
      }
      
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
      const outputBaseName = path.basename(filePath).replace(/\.scss$/, '.css');
      const hashedBaseName = this.getHashedFilename(outputBaseName, resultCss);
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
      const outputRelPath = path.join(outputSubdir, hashedBaseName).replace(/\\/g, '/');
      const hashedWebPath = '/' + outputRelPath;
      const fullOutputPath = path.join(process.cwd(), this.config.outputDir, outputRelPath);
      
      // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
      await fsPromises.mkdir(path.dirname(fullOutputPath), { recursive: true });
      await fsPromises.writeFile(fullOutputPath, resultCss, 'utf8');
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
      this.addToManifest(originalWebPath, hashedWebPath);
      
      this.logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω SCSS: ${path.basename(filePath)}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
      const result = { originalWebPath, hashedWebPath };
      if (isProdBuild) {
        this.cache.manifest[relativePathFromInput] = result;
      }
      
      return result;
      
    } catch (e) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SCSS ${filePrefix}: ${e.message}`);
      throw e;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JavaScript —Ñ–∞–π–ª—ã
   */
  async processJs(filePath) {
    const filePrefix = path.basename(filePath);
    const relativePathFromInput = path.relative(this.config.inputDir, filePath).replace(/\\/g, '/');
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≥–ª–∞–≤–Ω—ã–º –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –±–∞–Ω–¥–ª–∞
      const isMainBundleEntry = relativePathFromInput === 'assets/scripts/main.js';
      
      let resultJs, outputFileName, originalWebPath;
      
      if (isMainBundleEntry) {
        // –î–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–∞–Ω–¥–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º esbuild —Å –ø–æ–ª–Ω—ã–º –±–∞–Ω–¥–ª–∏–Ω–≥–æ–º
        const result = await this.compilers.esbuild.build({
          entryPoints: [filePath],
          bundle: true,
          minify: isProdBuild,
          sourcemap: !isProdBuild,
          write: false,
          absWorkingDir: process.cwd(),
        });
        
        resultJs = result.outputFiles[0].text;
        outputFileName = 'main.bundle.js';
        originalWebPath = '/assets/scripts/main.bundle.js';
        
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Å Terser, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
        const fileContent = await fsPromises.readFile(filePath, 'utf8');
        
        if (isProdBuild && this.compilers.Terser) {
          try {
            const minified = await this.compilers.Terser.minify(fileContent, {
              mangle: { toplevel: true },
              compress: { passes: 2 },
              format: { comments: false }
            });
            
            resultJs = minified.code || fileContent;
          } catch (e) {
            this.logger.warn(`–û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ Terser –¥–ª—è ${filePrefix}: ${e.message}`);
            resultJs = fileContent;
          }
        } else {
          resultJs = fileContent;
        }
        
        outputFileName = path.basename(filePath);
        originalWebPath = '/' + relativePathFromInput;
      }
      
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
      const hashedFileName = this.getHashedFilename(outputFileName, resultJs);
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
      const outputSubdir = path.dirname(relativePathFromInput);
      const outputRelPath = path.join(outputSubdir, hashedFileName).replace(/\\/g, '/');
      const hashedWebPath = '/' + outputRelPath;
      const fullOutputPath = path.join(process.cwd(), this.config.outputDir, outputRelPath);
      
      // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
      await fsPromises.mkdir(path.dirname(fullOutputPath), { recursive: true });
      await fsPromises.writeFile(fullOutputPath, resultJs, 'utf8');
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
      this.addToManifest(originalWebPath, hashedWebPath);
      
      this.logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω JS: ${filePrefix}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
      const result = { originalWebPath, hashedWebPath };
      if (isProdBuild) {
        this.cache.manifest[relativePathFromInput] = result;
      }
      
      return result;
      
    } catch (e) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JS ${filePrefix}: ${e.message}`);
      throw e;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ + —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ production)
   */
  async processStatic(filePath) {
    const filePrefix = path.basename(filePath);
    const relativePathFromInput = path.relative(this.config.inputDir, filePath).replace(/\\/g, '/');
    
    try {
      // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const fileContent = await fsPromises.readFile(filePath);
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—É—Ç–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
      const originalWebPath = '/' + relativePathFromInput;
      
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
      const hashedFileName = this.getHashedFilename(path.basename(filePath), fileContent);
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π
      const outputSubdir = path.dirname(relativePathFromInput);
      const outputRelPath = path.join(outputSubdir, hashedFileName).replace(/\\/g, '/');
      const hashedWebPath = '/' + outputRelPath;
      const fullOutputPath = path.join(process.cwd(), this.config.outputDir, outputRelPath);
      
      // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
      await fsPromises.mkdir(path.dirname(fullOutputPath), { recursive: true });
      await fsPromises.copyFile(filePath, fullOutputPath);
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
      this.addToManifest(originalWebPath, hashedWebPath);
      
      this.logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: ${filePrefix}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
      const result = { originalWebPath, hashedWebPath };
      if (isProdBuild) {
        this.cache.manifest[relativePathFromInput] = result;
      }
      
      return result;
      
    } catch (e) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ ${filePrefix}: ${e.message}`);
      throw e;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª
   */
  async saveManifest() {
    if (!isProdBuild) {
      this.logger.debug(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`);
      return false;
    }
    
    try {
      const manifestPath = path.join(
        process.cwd(),
        this.config.outputDir,
        'asset-manifest.json'
      );
      
      await fsPromises.mkdir(path.dirname(manifestPath), { recursive: true });
      await fsPromises.writeFile(
        manifestPath,
        JSON.stringify(this.manifest, null, 2),
        'utf8'
      );
      
      this.logger.info(`–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${Object.keys(this.manifest).length} –∑–∞–ø–∏—Å–µ–π`);
      
      return true;
    } catch (e) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: ${e.message}`);
      return false;
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è Eleventy
 */
export default function EleventyAssetProcessorPlugin(eleventyConfig, pluginOptions) {
  const logger = new Logger(isProdBuild, 'AssetProcessor Plugin');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∞—Å—Å–µ—Ç–æ–≤
  let assetProcessor;
  try {
    assetProcessor = new AssetProcessor(pluginOptions);
  } catch (e) {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}`);
    if (isProdBuild) throw e;
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    assetProcessor = {
      manifest: {},
      processAllAssets: async () => {},
      saveManifest: async () => {},
      addToManifest: () => {}
    };
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ hashed –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
  eleventyConfig.addFilter("hashed", filePath => {
    if (!isProdBuild) return filePath;
    
    let normalizedPath;
    try {
      const url = new URL(filePath, 'http://localhost');
      normalizedPath = url.pathname.startsWith('/') ? url.pathname : '/' + url.pathname;
    } catch (e) {
      normalizedPath = filePath.startsWith('/') ? filePath : '/' + filePath;
    }
    
    const hashedPath = assetProcessor.manifest[normalizedPath];
    if (!hashedPath) {
      logger.warn(`–í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å: ${normalizedPath}`);
      return filePath;
    }
    
    return hashedPath;
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  eleventyConfig.addGlobalData("assetManifest", assetProcessor.manifest);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Eleventy
  
  // beforeBuild: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞—Å—Å–µ—Ç–æ–≤
  eleventyConfig.on("beforeBuild", async () => {
    logger.info('–°–æ–±—ã—Ç–∏–µ "beforeBuild"');
    
    // –û—á–∏—Å—Ç–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π –≤ production
    if (isProdBuild && assetProcessor.manifest) {
      Object.keys(assetProcessor.manifest).forEach(key => {
        delete assetProcessor.manifest[key];
      });
    }
    
    try {
      await assetProcessor.processAllAssets();
    } catch (e) {
      logger.error(`–û—à–∏–±–∫–∞ –≤ processAllAssets: ${e.message}`);
      if (isProdBuild) throw e;
    }
  });
  
  // afterBuild: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  eleventyConfig.on("afterBuild", async () => {
    logger.info('–°–æ–±—ã—Ç–∏–µ "afterBuild"');
    
    try {
      await assetProcessor.saveManifest();
    } catch (e) {
      logger.error(`–û—à–∏–±–∫–∞ –≤ saveManifest: ${e.message}`);
      if (isProdBuild) throw e;
    }
  });
  
  logger.info("–ü–ª–∞–≥–∏–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
}