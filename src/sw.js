"use strict";

(function () {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const CONFIG = {
    version: "v3.5.0::",
    debug: false,
    caches: {
      static: "static-resources",
      pages: "html-pages", 
      images: "optimized-images",
      media: "media-files",
    },
    limits: {
      pages: 35,
      images: 50,
      media: 20,
    },
    externalDomains: {
      allowedOrigins: ["res.cloudinary.com"],
      cachingEnabled: true,
    },
    // –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    coreResources: [
       '/',
      '/cases/',
      '/blog/',
      '/faq/',
      '/contact/',
      '/uslugi/',
      '/uslugi/marketing-audit/',
      '/uslugi/brand-conception/',
      '/uslugi/razrabotka-reklamnyh-kampanij/',
      '/uslugi/autsorsing-marketinga/',
      '/about/',
      '/offline/', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
      
    ],
  };

  // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const Utils = {
    log(level, message, ...data) {
      if (!CONFIG.debug && level === "debug") return;

      const styles = {
        debug: "color: #7f8c8d",
        info: "color: #3498db", 
        warn: "color: #f39c12",
        error: "color: #e74c3c; font-weight: bold",
      };

      console[level](
        `%c[SW ${level.toUpperCase()}]`,
        styles[level],
        message,
        ...data
      );
    },

    getCacheName(type) {
      return `${CONFIG.version}${CONFIG.caches[type]}`;
    },

    determineCacheType(request) {
      const url = new URL(request.url);
      const acceptHeader = request.headers.get("Accept") || "";

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –¥–æ–º–µ–Ω—ã (Cloudinary)
      if (url.origin !== location.origin) {
        if (CONFIG.externalDomains.allowedOrigins.includes(url.hostname)) {
          return "images";
        }
        return null; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏ URL
      if (request.mode === "navigate" || acceptHeader.includes("text/html")) {
        return "pages";
      } else if (
        request.destination === "image" ||
        acceptHeader.includes("image") ||
        /\.(jpe?g|png|gif|avif|svg|webp)$/i.test(url.pathname)
      ) {
        return "images";
      } else if (
        request.destination === "audio" ||
        request.destination === "video" ||
        /\.(mp3|mp4|webm|ogg)$/i.test(url.pathname)
      ) {
        return "media";
      }

      return "static";
    },

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    createImageFallback() {
      return new Response(
        `<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">Offline</title><g fill="none" fill-rule="evenodd"><path fill="#D8D8D8" d="M0 0h400v300H0z"/><text fill="#9B9B9B" font-family="Helvetica Neue,Arial,Helvetica,sans-serif" font-size="72" font-weight="bold"><tspan x="93" y="172">offline</tspan></text></g></svg>`,
        {
          headers: {
            "Content-Type": "image/svg+xml",
            "Cache-Control": "no-store",
          },
        }
      );
    },

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    isValidResponse(response) {
      return response && 
             response.status >= 200 && 
             response.status < 400 && 
             response.type !== 'error';
    },

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    safeClone(response) {
      try {
        return response.clone();
      } catch (error) {
        Utils.log("warn", "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç:", error);
        return null;
      }
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º
  const Cache = {
    async open(type) {
      return await caches.open(Utils.getCacheName(type));
    },

    async addAll(type, urls) {
      try {
        const cache = await this.open(type);
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        const results = await Promise.allSettled(
          urls.map(async (url) => {
            try {
              await cache.add(url);
              Utils.log("debug", `–ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω: ${url}`);
            } catch (error) {
              Utils.log("warn", `–ù–µ —É–¥–∞–ª–æ—Å—å –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å ${url}:`, error);
              throw error;
            }
          })
        );
        
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected').length;
        
        Utils.log("info", `–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ${successful}, –û—à–∏–±–æ–∫: ${failed}`);
        
        if (failed > 0) {
          Utils.log("warn", `${failed} —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å`);
        }
      } catch (error) {
        Utils.log("error", `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–∏–ø–∞ ${type}:`, error);
        throw error;
      }
    },

    async put(type, request, response) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (!Utils.isValidResponse(response)) {
          Utils.log("warn", "–ü–æ–ø—ã—Ç–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", response.status);
          return;
        }

        const cache = await this.open(type);
        await cache.put(request, response);
        Utils.log("debug", `–ö–µ—à–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å —Ç–∏–ø–∞ ${type}:`, request.url);
      } catch (error) {
        Utils.log("error", `–û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:`, error);
      }
    },

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    async trim(type, maxItems = null) {
      try {
        const limit = maxItems || CONFIG.limits[type];
        const cache = await this.open(type);
        const keys = await cache.keys();

        if (keys.length > limit) {
          const deleteCount = keys.length - limit;
          Utils.log(
            "debug",
            `–£–¥–∞–ª–µ–Ω–∏–µ ${deleteCount} —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ –∫–µ—à–∞ ${type}, —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${keys.length}, –ª–∏–º–∏—Ç: ${limit}`
          );

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ (FIFO)
          const deletionPromises = keys
            .slice(0, deleteCount)
            .map((key) => cache.delete(key));
          await Promise.all(deletionPromises);

          Utils.log("debug", `–£–¥–∞–ª–µ–Ω–æ ${deleteCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–µ—à–∞ ${type}`);
        }
      } catch (error) {
        Utils.log("error", `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ ${type}:`, error);
      }
    },

    async clearOld() {
      try {
        const keys = await caches.keys();
        const currentVersion = CONFIG.version;
        const oldKeys = keys.filter((key) => !key.startsWith(currentVersion));

        if (oldKeys.length > 0) {
          Utils.log("info", `–£–¥–∞–ª–µ–Ω–∏–µ ${oldKeys.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π`);
          await Promise.all(oldKeys.map((key) => caches.delete(key)));
        }
      } catch (error) {
        Utils.log("error", `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π:`, error);
      }
    },
  };

  // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const Strategies = {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è "—Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –∑–∞—Ç–µ–º –∫–µ—à" –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
    async networkFirst(request, cacheType) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 3000);

        const response = await fetch(request, { 
          signal: controller.signal 
        });
        clearTimeout(timeoutId);

        // –ö–µ—à–∏—Ä—É–µ–º –∫–æ–ø–∏—é —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (Utils.isValidResponse(response)) {
          const copy = Utils.safeClone(response);
          if (copy) {
            await Cache.put(cacheType, request, copy);
            await Cache.trim(cacheType);
          }
        }

        return response;
      } catch (error) {
        Utils.log("warn", `–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à: ${request.url}`);

        // –ò—â–µ–º –≤ –∫–µ—à–µ
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          return cachedResponse;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π fallback –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
        if (cacheType === "pages") {
          const offlinePage = await caches.match("./offline/");
          if (offlinePage) {
            return offlinePage;
          }
          
          // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - inline HTML
          return new Response(
            `<!DOCTYPE html>
            <html lang="ru">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</title>
              <style>
                body { font-family: system-ui, sans-serif; text-align: center; padding: 2rem; }
                .offline { color: #666; margin-top: 2rem; }
              </style>
            </head>
            <body>
              <h1>üì¥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ñ–ª–∞–π–Ω</h1>
              <div class="offline">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</div>
            </body>
            </html>`,
            { 
              headers: { 
                "Content-Type": "text/html; charset=utf-8",
                "Cache-Control": "no-store"
              } 
            }
          );
        }

        throw error;
      }
    },

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è "—Å–Ω–∞—á–∞–ª–∞ –∫–µ—à, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ" –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    async staleWhileRevalidate(request, cacheType) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cachedResponse = await caches.match(request);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Å–µ—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
      const fetchPromise = fetch(request)
        .then((networkResponse) => {
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
          if (Utils.isValidResponse(networkResponse) && networkResponse.status !== 206) {
            const copy = Utils.safeClone(networkResponse);
            if (copy) {
              Cache.put(cacheType, request, copy)
                .then(() => Cache.trim(cacheType))
                .catch((error) =>
                  Utils.log("error", `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞: ${error}`)
                );
            }
          }
          return networkResponse;
        })
        .catch((error) => {
          Utils.log("warn", `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏: ${request.url}`, error);
          return null;
        });

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
      if (cachedResponse) {
        fetchPromise.catch(() => {}); // –ü–æ–¥–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        return cachedResponse;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–µ—Ç–∏
      const networkResponse = await fetchPromise;
      if (networkResponse && Utils.isValidResponse(networkResponse)) {
        return networkResponse;
      }

      // –ï—Å–ª–∏ –∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      if (cacheType === "images") {
        return Utils.createImageFallback();
      }

      return new Response("–†–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ñ–ª–∞–π–Ω", {
        status: 503,
        statusText: "Service Unavailable",
      });
    },

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è Cloudinary
    async cloudinaryStrategy(request) {
      try {
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          this.updateCloudinaryCache(request).catch(() => {});
          return cachedResponse;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);

        const networkResponse = await fetch(request, {
          mode: "cors",
          credentials: "omit",
          signal: controller.signal
        });
        clearTimeout(timeoutId);

        if (Utils.isValidResponse(networkResponse)) {
          const clone = Utils.safeClone(networkResponse);
          if (clone) {
            await Cache.put("images", request, clone);
            await Cache.trim("images");
          }
          return networkResponse;
        }

        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Cloudinary");
      } catch (error) {
        Utils.log("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Cloudinary —Ä–µ—Å—É—Ä—Å–∞:", error);
        return Utils.createImageFallback();
      }
    },

    async updateCloudinaryCache(request) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);

        const networkResponse = await fetch(request, {
          mode: "cors",
          credentials: "omit",
          signal: controller.signal
        });
        clearTimeout(timeoutId);

        if (Utils.isValidResponse(networkResponse)) {
          const clone = Utils.safeClone(networkResponse);
          if (clone) {
            await Cache.put("images", request, clone);
            Utils.log("debug", "Cloudinary —Ä–µ—Å—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–µ—à–µ:", request.url);
            await Cache.trim("images");
          }
        }
      } catch (error) {
        Utils.log("warn", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Cloudinary —Ä–µ—Å—É—Ä—Å:", error);
      }
    },
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Service Worker

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞: –∫–µ—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  self.addEventListener("install", (event) => {
    Utils.log("info", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker " + CONFIG.version);

    event.waitUntil(
      (async () => {
        try {
          await Cache.addAll("static", CONFIG.coreResources);

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ offline-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
          try {
            const offlineRequest = new Request("./offline/");
            const offlinePage = await caches.match(offlineRequest);
            if (!offlinePage) {
              Utils.log("warn", "Offline-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —è–≤–Ω–æ");
              const offlineCache = await Cache.open("pages");
              await offlineCache.add(offlineRequest);
              Utils.log("info", "Offline-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–µ—à");
            } else {
              Utils.log("info", "Offline-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞");
            }
          } catch (offlineError) {
            Utils.log("error", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å offline-—Å—Ç—Ä–∞–Ω–∏—Ü–µ–π:", offlineError);
          }

          await self.skipWaiting();
          Utils.log("info", "Service Worker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        } catch (error) {
          Utils.log("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Service Worker:", error);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      })()
    );
  });

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è: –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
  self.addEventListener("activate", (event) => {
    Utils.log("info", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker " + CONFIG.version);

    event.waitUntil(
      (async () => {
        try {
          await Cache.clearOld();
          await self.clients.claim();
          Utils.log("info", "Service Worker —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
        } catch (error) {
          Utils.log("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker:", error);
        }
      })()
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  self.addEventListener("message", (event) => {
    if (event.data && event.data.command) {
      switch (event.data.command) {
        case "trimCaches":
          Utils.log("info", "–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π");
          Promise.all([
            Cache.trim("pages"),
            Cache.trim("images"), 
            Cache.trim("media"),
          ]).catch((error) => {
            Utils.log("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–µ–π:", error);
          });
          break;

        case "setDebug":
          CONFIG.debug = !!event.data.value;
          Utils.log("info", `–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ ${CONFIG.debug ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}`);
          break;

        case "updateVersion":
          Utils.log("info", "–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏");
          self.registration.update();
          break;
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch-–∑–∞–ø—Ä–æ—Å–æ–≤
  self.addEventListener("fetch", (event) => {
    const request = event.request;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ GET-–∑–∞–ø—Ä–æ—Å—ã
    if (request.method !== "GET") {
      event.respondWith(
        fetch(request).catch(() => 
          caches.match("./offline/") || 
          new Response("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ñ–ª–∞–π–Ω", { status: 503 })
        )
      );
      return;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º MP3-—Ñ–∞–π–ª—ã –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞-—Å—Ç—Ä–∏–º—ã
    if (request.url.endsWith(".mp3") || request.url.includes("/stream/")) {
      return;
    }

    const url = new URL(request.url);
    const cacheType = Utils.determineCacheType(request);

    if (!cacheType) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ Cloudinary
    const isCloudinaryRequest = CONFIG.externalDomains.allowedOrigins.includes(url.hostname);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Cloudinary
    if (isCloudinaryRequest && CONFIG.externalDomains.cachingEnabled) {
      event.respondWith(Strategies.cloudinaryStrategy(request));
      return;
    }

    // –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
    if (cacheType === "pages") {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ navigation-–∑–∞–ø—Ä–æ—Å–æ–≤
      let fixedRequest = request;
      if (request.mode !== "navigate" && request.headers.get("Accept")?.includes("text/html")) {
        fixedRequest = new Request(request.url, {
          method: "GET",
          headers: new Headers({
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }),
          mode: "navigate",
          credentials: "same-origin",
          redirect: "follow",
        });
      }

      event.respondWith(Strategies.networkFirst(fixedRequest, cacheType));
    } else {
      event.respondWith(Strategies.staleWhileRevalidate(request, cacheType));
    }
  });

  // –î–û–ë–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  self.addEventListener('error', (event) => {
    Utils.log("error", "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Service Worker:", event.error);
  });

  self.addEventListener('unhandledrejection', (event) => {
    Utils.log("error", "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ –≤ SW:", event.reason);
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  });

})();