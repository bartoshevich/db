// src/sw.js - –ö–∞—Å—Ç–æ–º–Ω—ã–π Service Worker –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Workbox
console.log('üîß Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener('message', (event) => {
  console.log('üì® SW –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SW');
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é SW –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
    event.ports[0].postMessage({
      type: 'SW_VERSION',
      version: '1.0.0'
    });
  }
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è SW
self.addEventListener('activate', (event) => {
  console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  
  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
  event.waitUntil(
    self.clients.claim().then(() => {
      console.log('üéØ SW –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      return self.clients.matchAll().then((clients) => {
        clients.forEach((client) => {
          client.postMessage({
            type: 'SW_ACTIVATED',
            payload: {
              version: '1.0.0',
              timestamp: new Date().toISOString()
            }
          });
        });
      });
    })
  );
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SW
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º skipWaiting() —Å—Ä–∞–∑—É - –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
self.addEventListener('fetch', (event) => {
  const { request } = event;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev)
  if (request.mode === 'navigate') {
    console.log('üåê –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', request.url);
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ API –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (request.url.includes('/api/')) {
    // –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    event.respondWith(
      fetch(request)
        .then(response => {
          // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
          if (response.ok) {
            console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:', request.url);
          }
          return response;
        })
        .catch(error => {
          console.error('‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', request.url, error);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          return new Response(
            JSON.stringify({ error: '–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' }),
            { 
              status: 503,
              headers: { 'Content-Type': 'application/json' }
            }
          );
        })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
self.addEventListener('push', (event) => {
  console.log('üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  if (event.data) {
    const data = event.data.json();
    
    event.waitUntil(
      self.registration.showNotification(data.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', {
        body: data.body || '–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞',
        icon: '/favicon-192x192.png',
        badge: '/maskable_icon.png',
        tag: 'update-notification',
        requireInteraction: false,
        actions: [
          {
            action: 'open',
            title: '–û—Ç–∫—Ä—ã—Ç—å'
          },
          {
            action: 'dismiss',
            title: '–ó–∞–∫—Ä—ã—Ç—å'
          }
        ]
      })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  if (event.action === 'open') {
    event.waitUntil(
      self.clients.openWindow('/')
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
self.addEventListener('error', (event) => {
  console.error('‚ùå Service Worker –æ—à–∏–±–∫–∞:', event.error);
});

self.addEventListener('unhandledrejection', (event) => {
  console.error('‚ùå Service Worker –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', event.reason);
});